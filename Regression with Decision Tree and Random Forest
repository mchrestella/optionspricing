{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"ZcIFFziGM0JF"},"outputs":[],"source":["import os\n","import pandas as pd\n","import numpy as np\n","\n","from google.colab import drive\n","\n","import datetime\n","\n","from tqdm import tqdm"]},{"cell_type":"code","source":["drive.mount('/content/drive')\n","path = \"/content/drive/MyDrive/DSO 530 Project\"\n","\n","os.chdir(path)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J7SHt2U_M4s8","executionInfo":{"status":"ok","timestamp":1714673691946,"user_tz":420,"elapsed":173950,"user":{"displayName":"Teresa Chen","userId":"17006795700898442372"}},"outputId":"13a9b82e-dd8c-41a4-a046-015fffb7b93c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","sample_submission = 'group_0_prediction.csv'\n","sample_submission = 'group_0_prediction.csv'\n","sample_submission = pd.read_csv(sample_submission)\n","sample_submission.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"umx6027rM57q","executionInfo":{"status":"ok","timestamp":1714673693358,"user_tz":420,"elapsed":1419,"user":{"displayName":"Teresa Chen","userId":"17006795700898442372"}},"outputId":"407e3744-455c-4af1-a474-9e05ca4702d0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Unnamed: 0 Unnamed: 1  Unnamed: 2  Unnamed: 3  Unnamed: 4  Unnamed: 5  \\\n","0      Value         BS         NaN         NaN         NaN         NaN   \n","1          1          0         NaN         NaN         NaN         NaN   \n","2          2          0         NaN         NaN         NaN         NaN   \n","3          1          0         NaN         NaN         NaN         NaN   \n","4          1          0         NaN         NaN         NaN         NaN   \n","\n","   Unnamed: 6  \n","0         NaN  \n","1         NaN  \n","2         NaN  \n","3         NaN  \n","4         NaN  "],"text/html":["\n","  <div id=\"df-aa8e0da7-c976-46b0-917e-6be465b84434\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>Unnamed: 1</th>\n","      <th>Unnamed: 2</th>\n","      <th>Unnamed: 3</th>\n","      <th>Unnamed: 4</th>\n","      <th>Unnamed: 5</th>\n","      <th>Unnamed: 6</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Value</td>\n","      <td>BS</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aa8e0da7-c976-46b0-917e-6be465b84434')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-aa8e0da7-c976-46b0-917e-6be465b84434 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-aa8e0da7-c976-46b0-917e-6be465b84434');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-bbdb13fa-3f17-465b-9171-3cb08bb77d9f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bbdb13fa-3f17-465b-9171-3cb08bb77d9f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-bbdb13fa-3f17-465b-9171-3cb08bb77d9f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"sample_submission","summary":"{\n  \"name\": \"sample_submission\",\n  \"rows\": 501,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 17,\n        \"samples\": [\n          \"Value\",\n          \"1\",\n          \"9\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Unnamed: 1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"BS\",\n          \"0\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Unnamed: 2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Unnamed: 3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Unnamed: 4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Unnamed: 5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Unnamed: 6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["train = 'option_train.csv'\n","train = pd.read_csv(train)\n","train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"rxeBzbMeNCaz","executionInfo":{"status":"ok","timestamp":1714673694509,"user_tz":420,"elapsed":1156,"user":{"displayName":"Teresa Chen","userId":"17006795700898442372"}},"outputId":"b18147d1-d2c0-4af2-a5f8-47a369c53bcc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0    Value        S     K       tau       r     BS\n","0           1  348.500  1394.46  1050  0.128767  0.0116  Under\n","1           2  149.375  1432.25  1400  0.679452  0.0113  Under\n","2           3  294.500  1478.90  1225  0.443836  0.0112  Under\n","3           4    3.375  1369.89  1500  0.117808  0.0119   Over\n","4           5   84.000  1366.42  1350  0.298630  0.0119  Under"],"text/html":["\n","  <div id=\"df-a9c7f3e6-8ca9-4e0c-a6d3-15152af75c75\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>Value</th>\n","      <th>S</th>\n","      <th>K</th>\n","      <th>tau</th>\n","      <th>r</th>\n","      <th>BS</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>348.500</td>\n","      <td>1394.46</td>\n","      <td>1050</td>\n","      <td>0.128767</td>\n","      <td>0.0116</td>\n","      <td>Under</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>149.375</td>\n","      <td>1432.25</td>\n","      <td>1400</td>\n","      <td>0.679452</td>\n","      <td>0.0113</td>\n","      <td>Under</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>294.500</td>\n","      <td>1478.90</td>\n","      <td>1225</td>\n","      <td>0.443836</td>\n","      <td>0.0112</td>\n","      <td>Under</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>3.375</td>\n","      <td>1369.89</td>\n","      <td>1500</td>\n","      <td>0.117808</td>\n","      <td>0.0119</td>\n","      <td>Over</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>84.000</td>\n","      <td>1366.42</td>\n","      <td>1350</td>\n","      <td>0.298630</td>\n","      <td>0.0119</td>\n","      <td>Under</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a9c7f3e6-8ca9-4e0c-a6d3-15152af75c75')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a9c7f3e6-8ca9-4e0c-a6d3-15152af75c75 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a9c7f3e6-8ca9-4e0c-a6d3-15152af75c75');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6e365fc9-023e-4284-aa29-b5f345254b00\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6e365fc9-023e-4284-aa29-b5f345254b00')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6e365fc9-023e-4284-aa29-b5f345254b00 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train","summary":"{\n  \"name\": \"train\",\n  \"rows\": 5000,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1443,\n        \"min\": 1,\n        \"max\": 5000,\n        \"num_unique_values\": 5000,\n        \"samples\": [\n          1502,\n          2587,\n          2654\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 125.15500007326867,\n        \"min\": 0.28125,\n        \"max\": 685.5,\n        \"num_unique_values\": 2001,\n        \"samples\": [\n          229.125,\n          86.0,\n          347.375\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 56.05152255114043,\n        \"min\": 1264.74,\n        \"max\": 1527.46,\n        \"num_unique_values\": 250,\n        \"samples\": [\n          1455.14,\n          1445.57,\n          1400.14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"K\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 172,\n        \"min\": 750,\n        \"max\": 1995,\n        \"num_unique_values\": 73,\n        \"samples\": [\n          1350,\n          1360,\n          1550\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tau\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23118440981502342,\n        \"min\": 0.0849315068493151,\n        \"max\": 0.989041095890411,\n        \"num_unique_values\": 237,\n        \"samples\": [\n          0.931506849315068,\n          0.175342465753425,\n          0.654794520547945\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"r\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0004483820349767127,\n        \"min\": 0.0106,\n        \"max\": 0.0129,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.0116,\n          0.0118,\n          0.0109\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BS\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Over\",\n          \"Under\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["train.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N7WHvJiDND2o","executionInfo":{"status":"ok","timestamp":1714673694510,"user_tz":420,"elapsed":10,"user":{"displayName":"Teresa Chen","userId":"17006795700898442372"}},"outputId":"bbf84709-f5e5-42dc-b09c-7cb810622a47"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 5000 entries, 0 to 4999\n","Data columns (total 7 columns):\n"," #   Column      Non-Null Count  Dtype  \n","---  ------      --------------  -----  \n"," 0   Unnamed: 0  5000 non-null   int64  \n"," 1   Value       5000 non-null   float64\n"," 2   S           5000 non-null   float64\n"," 3   K           5000 non-null   int64  \n"," 4   tau         5000 non-null   float64\n"," 5   r           5000 non-null   float64\n"," 6   BS          5000 non-null   object \n","dtypes: float64(4), int64(2), object(1)\n","memory usage: 273.6+ KB\n"]}]},{"cell_type":"code","source":["train_missing_values = train.isnull().sum()\n","train_missing_values"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RHN9GpiJNGpP","executionInfo":{"status":"ok","timestamp":1714673694510,"user_tz":420,"elapsed":8,"user":{"displayName":"Teresa Chen","userId":"17006795700898442372"}},"outputId":"319eb25a-45e3-46e2-d852-4cbeca853f9a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Unnamed: 0    0\n","Value         0\n","S             0\n","K             0\n","tau           0\n","r             0\n","BS            0\n","dtype: int64"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["test = './option_test_nolabel.csv'\n","test = pd.read_csv(test)\n","test.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"5OCs6fCwNIJx","executionInfo":{"status":"ok","timestamp":1714673695292,"user_tz":420,"elapsed":787,"user":{"displayName":"Teresa Chen","userId":"17006795700898442372"}},"outputId":"63142b7f-8771-46c4-d08a-007eebdce0f0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0        S     K       tau       r\n","0           1  1409.28  1325  0.126027  0.0115\n","1           2  1505.97  1100  0.315068  0.0110\n","2           3  1409.57  1450  0.197260  0.0116\n","3           4  1407.81  1250  0.101370  0.0116\n","4           5  1494.50  1300  0.194521  0.0110"],"text/html":["\n","  <div id=\"df-fc1c49d3-cb38-409c-88c3-fceb1f3e728c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>S</th>\n","      <th>K</th>\n","      <th>tau</th>\n","      <th>r</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>1409.28</td>\n","      <td>1325</td>\n","      <td>0.126027</td>\n","      <td>0.0115</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1505.97</td>\n","      <td>1100</td>\n","      <td>0.315068</td>\n","      <td>0.0110</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1409.57</td>\n","      <td>1450</td>\n","      <td>0.197260</td>\n","      <td>0.0116</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1407.81</td>\n","      <td>1250</td>\n","      <td>0.101370</td>\n","      <td>0.0116</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>1494.50</td>\n","      <td>1300</td>\n","      <td>0.194521</td>\n","      <td>0.0110</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fc1c49d3-cb38-409c-88c3-fceb1f3e728c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fc1c49d3-cb38-409c-88c3-fceb1f3e728c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fc1c49d3-cb38-409c-88c3-fceb1f3e728c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1246b55c-c4b8-4228-b5a2-c282385a6b11\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1246b55c-c4b8-4228-b5a2-c282385a6b11')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1246b55c-c4b8-4228-b5a2-c282385a6b11 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"test","summary":"{\n  \"name\": \"test\",\n  \"rows\": 500,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 144,\n        \"min\": 1,\n        \"max\": 500,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          362,\n          74,\n          375\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55.26999377643981,\n        \"min\": 1264.74,\n        \"max\": 1527.46,\n        \"num_unique_values\": 219,\n        \"samples\": [\n          1366.42,\n          1421.22,\n          1448.72\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"K\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 167,\n        \"min\": 850,\n        \"max\": 1995,\n        \"num_unique_values\": 52,\n        \"samples\": [\n          1150,\n          1395,\n          1455\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tau\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.22191633216899417,\n        \"min\": 0.0849315068493151,\n        \"max\": 0.986301369863014,\n        \"num_unique_values\": 168,\n        \"samples\": [\n          0.810958904109589,\n          0.583561643835616,\n          0.83013698630137\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"r\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00044493763495347984,\n        \"min\": 0.0106,\n        \"max\": 0.0129,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.0115,\n          0.0112,\n          0.0113\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["test_missing_values = test.isnull().sum()\n","test_missing_values"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Nq6AV0vWNKTa","executionInfo":{"status":"ok","timestamp":1714673695292,"user_tz":420,"elapsed":6,"user":{"displayName":"Teresa Chen","userId":"17006795700898442372"}},"outputId":"a93994bc-4a7d-4477-935d-256ccdf42265"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Unnamed: 0    0\n","S             0\n","K             0\n","tau           0\n","r             0\n","dtype: int64"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["# **Regression Model using Decision Tree & Random Forest**"],"metadata":{"id":"2mTwVTNsjgIQ"}},{"cell_type":"code","source":["# Import necessary libraries\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.metrics import mean_squared_error, r2_score\n","\n","# Load the training data\n","train_data = pd.read_csv('option_train.csv')\n","\n","# Define features and target variables\n","X = train_data[['S', 'K', 'tau', 'r']]\n","y_value = train_data['Value']\n","\n","\n","from sklearn.preprocessing import StandardScaler\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(X)\n","\n","# Split the data into training and validation sets\n","X_train, X_valid, y_train, y_valid = train_test_split(X_scaled, y_value, test_size=0.2, random_state=42)\n","\n","\n","# Train regression models\n","\n","decision_tree_reg = DecisionTreeRegressor()\n","decision_tree_reg.fit(X_train, y_train)\n","\n","random_forest_reg = RandomForestRegressor()\n","random_forest_reg.fit(X_train, y_train)\n","\n","# Make predictions on the validation set\n","y_pred_tree = decision_tree_reg.predict(X_valid)\n","y_pred_forest = random_forest_reg.predict(X_valid)\n","\n","# Evaluate regression model\n","\n","print(\"Decision Tree:\")\n","print(\"Mean Squared Error (MSE):\", mean_squared_error(y_valid, y_pred_tree))\n","print(\"R-squared:\", r2_score(y_valid, y_pred_tree))\n","print()\n","\n","print(\"Random Forest:\")\n","print(\"Mean Squared Error (MSE):\", mean_squared_error(y_valid, y_pred_forest))\n","print(\"R-squared:\", r2_score(y_valid, y_pred_forest))\n","print()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HzK0KAffNL5D","executionInfo":{"status":"ok","timestamp":1714673697742,"user_tz":420,"elapsed":2454,"user":{"displayName":"Teresa Chen","userId":"17006795700898442372"}},"outputId":"4bb55789-32f6-4d6d-c1a7-c4960fc823b3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Decision Tree:\n","Mean Squared Error (MSE): 109.949580078125\n","R-squared: 0.9931147376906543\n","\n","Random Forest:\n","Mean Squared Error (MSE): 56.48595471640625\n","R-squared: 0.9964627366949476\n","\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import KFold, cross_val_score\n","from sklearn.linear_model import LinearRegression\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.ensemble import RandomForestRegressor\n","import numpy as np\n","\n","# Define the range of fold numbers to iterate over\n","fold_range = range(2, 15)  # Adjust the range as needed\n","\n","# Define the models you want to evaluate\n","models = {\n","    \"Decision Tree\": DecisionTreeRegressor(),\n","    \"Random Forest\": RandomForestRegressor()\n","}\n","\n","# Define your feature matrix X and target variable y\n","\n","# Iterate over different numbers of folds\n","for fold in fold_range:\n","    print(f\"Number of Folds: {fold}\")\n","    kfolds = KFold(n_splits=fold, shuffle=True, random_state=1)\n","\n","    # Perform cross-validation for each model\n","    for model_name, model in models.items():\n","        r2_scores = cross_val_score(model, X_train, y_train, cv=kfolds, scoring='r2')\n","        mean_r2 = np.mean(r2_scores)\n","        print(f\"{model_name}: Mean R-squared = {mean_r2}\")\n","\n","    print()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SSD42M6ENfxu","executionInfo":{"status":"ok","timestamp":1714673803228,"user_tz":420,"elapsed":105490,"user":{"displayName":"Teresa Chen","userId":"17006795700898442372"}},"outputId":"2022ebd8-c2e1-45ac-c88d-e6c53c7dbb2f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of Folds: 2\n","Decision Tree: Mean R-squared = 0.9871550330396058\n","Random Forest: Mean R-squared = 0.9943669133957908\n","\n","Number of Folds: 3\n","Decision Tree: Mean R-squared = 0.9896022582425908\n","Random Forest: Mean R-squared = 0.9953433106695188\n","\n","Number of Folds: 4\n","Decision Tree: Mean R-squared = 0.9904961501380616\n","Random Forest: Mean R-squared = 0.9956827686414522\n","\n","Number of Folds: 5\n","Decision Tree: Mean R-squared = 0.9906087582318204\n","Random Forest: Mean R-squared = 0.9958417095614391\n","\n","Number of Folds: 6\n","Decision Tree: Mean R-squared = 0.9903282601530682\n","Random Forest: Mean R-squared = 0.9959848268131414\n","\n","Number of Folds: 7\n","Decision Tree: Mean R-squared = 0.9909813392691394\n","Random Forest: Mean R-squared = 0.9960930676965353\n","\n","Number of Folds: 8\n","Decision Tree: Mean R-squared = 0.9909924259502986\n","Random Forest: Mean R-squared = 0.9961132345442483\n","\n","Number of Folds: 9\n","Decision Tree: Mean R-squared = 0.9912211311489857\n","Random Forest: Mean R-squared = 0.9960837495388287\n","\n","Number of Folds: 10\n","Decision Tree: Mean R-squared = 0.9914230041271426\n","Random Forest: Mean R-squared = 0.996138748099192\n","\n","Number of Folds: 11\n","Decision Tree: Mean R-squared = 0.9917787538067302\n","Random Forest: Mean R-squared = 0.9962371137718069\n","\n","Number of Folds: 12\n","Decision Tree: Mean R-squared = 0.9915021753252319\n","Random Forest: Mean R-squared = 0.9961719122140716\n","\n","Number of Folds: 13\n","Decision Tree: Mean R-squared = 0.9917234661047949\n","Random Forest: Mean R-squared = 0.9962600161180796\n","\n","Number of Folds: 14\n","Decision Tree: Mean R-squared = 0.9918351048774798\n","Random Forest: Mean R-squared = 0.9962944031750779\n","\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Define lists to store mean R-squared scores for each model\n","mean_r2_scores = {model_name: [] for model_name in models}\n","\n","# Iterate over different numbers of folds\n","for fold in fold_range:\n","    kfolds = KFold(n_splits=fold, shuffle=True, random_state=1)\n","\n","    # Perform cross-validation for each model\n","    for model_name, model in models.items():\n","        r2_scores = cross_val_score(model, X_train, y_train, cv=kfolds, scoring='r2')\n","        mean_r2 = np.mean(r2_scores)\n","        mean_r2_scores[model_name].append(mean_r2)\n","\n","# Plot the mean R-squared scores for each model at different numbers of folds\n","plt.figure(figsize=(10, 6))\n","for model_name, scores in mean_r2_scores.items():\n","    plt.plot(fold_range, scores, marker='o', label=model_name)\n","\n","plt.title('Mean R-squared Scores vs. Number of Folds')\n","plt.xlabel('Number of Folds')\n","plt.ylabel('Mean R-squared Score')\n","plt.legend()\n","plt.grid(True)\n","plt.xticks(fold_range)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"OWY-yhfD0EV3","executionInfo":{"status":"ok","timestamp":1714673902024,"user_tz":420,"elapsed":98811,"user":{"displayName":"Teresa Chen","userId":"17006795700898442372"}},"outputId":"1db06f71-2a64-4ff0-9596-0c9f0b794886"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"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nck/fDWNfTU/DaWfAPtqrhpKXxtKPwH21Rw1lH4C7Kup6XNrEotwEBERERER1RImYERERERERLWECRgREREREVEtYQJGRERERERUS5iAERERERER1RImYERERERERLWECRgREREREVEtYQJGRERERERUS5iAERERERER1RImYERERERERLWECRgREREREVEtYQJGRERERERUS5iAERERERER1RImYERERERE5kCtgujWAXilHYbo1gFArTJ1RFQBC1MHQEREREQmoHOxbgf4dwPEElNHRQ8r5ncgcgYssu6iPQDcWgXYeQL9PgKCB5s6OiqDCRgRERFRQ8OLdfMS8zuwZRQAQXd/VoJmf9gPfF/rEE5BJCIiImpISi/Ws+7q7i+9WI/53TRx0cNRq4DIGSiXfAEl+wTg72lAXpp5TUmsx9MtOQJGREREVMrcp+VVe7EuAiJnAkEDzavf9VlRHpCdAGQnlnwt+30ikHZD831VshOBpX6a7y2sAKk1ILMBpKUP65J9tiXf2zywbQ1Ibcs8r8y2pRUgEtX8z6Gsej6CywSMiIjoYZn7xXpDU58u6gQBUOYBBVlAYVbJ10ygIPOBfWW/ZmpGvR4c+dI9MZAVD2x6CXBvBVg7AwonzaPs9xayWuuq2SouAnKSSpKpu7pJVenXrATN+2rU183XPPJSjHM+kbhMEvdg4lZmv6xsG5vyiVzZpFBiWfnrmcF0SyZgRERED6M+XaxT9Wrzok4QgOICTWJUkHk/OXowaSq3r2zbbEBdbJx4KnLlb82jMjI7QOEIKJwrSdJK95e0kdnW/ihJqdr+Q4laBeSmlBmtqiCpyk4wLAGyVAC2Hpp/Y2zdSx4emq8590pGNavx8q+AZ4jms1OUW/Io+b4wBygqfZQc07bLqXi7KEdzXkGt+VwWZj3Uj6tCEtkDo3QliZulArixB/V9BJcJGBERkaHM4C+wVIah0/KUBQ+MOpVJkCoadaromFppnNhFYkBur0mI5HaAzL7ka8m2zjE7ICMO2D2v+vO2GaG56M1NAfJSNY/S7wXV/Qvu9Jv6xSmRlknMnCpO0sombwpH41xAG/MPJYIA5KdXnFRlJ2pGFrMTNaNagp73I4ktSxIrD92kytajzMO96gRWrQIOrdT8+1PhZ1ik6bN/qOZnqnA0rN+VUas1o7DapCynJJHL1U3myiV3FbQr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FBRg9uzZuHHjBmxsbDBgwACsX78eDg4O2jaZmZmYNWsW7ty5A0dHRzz//PNYvHixyYcmiYiIiIioYTN5AgYAEyZMwIQJEyo8tnfvXp3t0NBQxMTEVHm+sLAwhIWFGRRDRfd9ERERERERGZPJF2ImIiIiIiJqKJiAERERERER1RImYERERERERLWECRgREREREVEtYQJGRERERERUS5iAERERERER1RImYERERERERLWECRgREREREVEtYQJGRERERERUS5iAERERERER1RImYERERERERLWECRgREREREVEtYQJGRERERERUS5iAERERERER1RImYERERERERLWECRgREREREVEtYQJGRERERERUS5iAERERERER1RImYERERERERLWECRgREREREVEtYQJGRERERERUS5iAERERERER1RImYERERERERLWECRgREREREVEtYQJGRERERERUS5iAERERERER1RImYERERERERLWECRgREREREVEteaQErKCgwFhxEBERERERmT2DEzC1Wo2FCxfCy8sLNjY2uHHjBgBgzpw5+L//+z+jB0hERERERGQuDE7AFi1ahHXr1mHp0qWQSqXa/Y899hi+++47owZHRERERERkTgxOwH744Qd88803eOmllyCRSLT727Rpg0uXLhk1OCIiIiIiInNicAIWHx+PwMDAcvvVajWUSqVRgiIiIiIiIjJHBidgwcHB2L9/f7n9W7duRdu2bY0SFBERERERkTmyMPQJc+fOxejRoxEfHw+1Wo1ffvkFly9fxg8//IA//vijJmIkIiIiIiIyCwaPgA0ZMgQ7duzA7t27YW1tjblz5+LixYvYsWMHevfuXRMxEhERERERmQWDRsCKi4vx4YcfYsyYMdi1a1dNxURERERERGSWDBoBs7CwwNKlS1FcXFxT8RAREREREZktg6cg9uzZE/v27auJWIiIiIiIiMyawUU4+vfvj5kzZ+LcuXNo164drK2tdY4PHjzYaMERERERERGZE4MTsLfeegsAsHz58nLHRCIRVCrVo0dFRERERERkhgxOwNRqdU3EQUREREREZPYMvgeMiIiIiIiIHs5DJWD79u3DoEGDEBgYiMDAQAwePBj79+83dmxERERERERmxeAEbMOGDejVqxcUCgUmTpyIiRMnwsrKCj179sTGjRtrIkYiIiIiIiKz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\n"},"metadata":{}}]},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import KFold, cross_val_score\n","from sklearn.linear_model import LinearRegression\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.ensemble import RandomForestRegressor\n","\n","# Define the range of folds\n","fold_range = range(2, 15) # Adjust as needed\n","\n","# Define the models\n","models = {\n","    'Decision Tree': DecisionTreeRegressor(),\n","    'Random Forest': RandomForestRegressor()\n","}\n","\n","# Initialize lists to store mean MSE scores for each model\n","mean_squared_error = {model_name: [] for model_name in models}\n","\n","# Define custom scoring function for negated mean squared error\n","def custom_scoring_function(estimator, X, y):\n","    y_pred = estimator.predict(X)\n","    mse = np.mean((y_pred - y) ** 2)\n","    return -mse  # Negate MSE to make it positive for maximization\n","\n","# Perform cross-validation for each fold and each model\n","for fold in fold_range:\n","    print(f\"Number of Folds: {fold}\")\n","    kfolds = KFold(n_splits=fold, shuffle=True, random_state=1)\n","\n","    # Perform cross-validation for each model\n","    for model_name, model in models.items():\n","        mse_scores = cross_val_score(model, X_train, y_train, cv=kfolds, scoring=custom_scoring_function)\n","        mean_mse = np.mean(-mse_scores)  # Negate the mean MSE back to positive\n","        mean_squared_error[model_name].append(mean_mse)\n","        print(f\"{model_name}: Mean MSE = {mean_mse}\")\n","\n","    print()\n","\n","# Plot the mean MSE scores for each model at different numbers of folds\n","plt.figure(figsize=(10, 6))\n","for model_name, scores in mean_squared_error.items():\n","    plt.plot(fold_range, scores, marker='o', label=model_name)\n","\n","plt.title('MSE vs. Number of Folds')\n","plt.xlabel('Number of Folds')\n","plt.ylabel('MSE')\n","plt.legend()\n","plt.grid(True)\n","plt.xticks(fold_range)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"a97fXKVvLMcb","executionInfo":{"status":"ok","timestamp":1714674002118,"user_tz":420,"elapsed":100098,"user":{"displayName":"Teresa Chen","userId":"17006795700898442372"}},"outputId":"224764fe-f582-4535-ca75-fa9ad7bbb9a8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of Folds: 2\n","Decision Tree: Mean MSE = 203.97492919921876\n","Random Forest: Mean MSE = 86.9467521645996\n","\n","Number of Folds: 3\n","Decision Tree: Mean MSE = 169.23043794214635\n","Random Forest: Mean MSE = 73.65291359402612\n","\n","Number of Folds: 4\n","Decision Tree: Mean MSE = 147.75172387695312\n","Random Forest: Mean MSE = 67.70949438066405\n","\n","Number of Folds: 5\n","Decision Tree: Mean MSE = 143.7020732421875\n","Random Forest: Mean MSE = 62.57091949187012\n","\n","Number of Folds: 6\n","Decision Tree: Mean MSE = 147.94020385743102\n","Random Forest: Mean MSE = 64.5482427950969\n","\n","Number of Folds: 7\n","Decision Tree: Mean MSE = 142.0407518782389\n","Random Forest: Mean MSE = 62.18611893080351\n","\n","Number of Folds: 8\n","Decision Tree: Mean MSE = 137.127744140625\n","Random Forest: Mean MSE = 59.37459835659179\n","\n","Number of Folds: 9\n","Decision Tree: Mean MSE = 133.99241559359132\n","Random Forest: Mean MSE = 62.22087556595401\n","\n","Number of Folds: 10\n","Decision Tree: Mean MSE = 133.61022314453123\n","Random Forest: Mean MSE = 59.32623088076173\n","\n","Number of Folds: 11\n","Decision Tree: Mean MSE = 129.4106777475656\n","Random Forest: Mean MSE = 58.213953903679744\n","\n","Number of Folds: 12\n","Decision Tree: Mean MSE = 134.19241794613782\n","Random Forest: Mean MSE = 59.75844265497071\n","\n","Number of Folds: 13\n","Decision Tree: Mean MSE = 129.92803458803894\n","Random Forest: Mean MSE = 57.63299366557256\n","\n","Number of Folds: 14\n","Decision Tree: Mean MSE = 130.20693680462904\n","Random Forest: Mean MSE = 56.71845988375354\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# **KNN Regression**"],"metadata":{"id":"HSyKLMcQjbpO"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.metrics import r2_score\n","\n","\n","# Prepare the data\n","X = train[['S', 'K', 'tau', 'r']]\n","y = train['Value']\n","\n","# Preprocess the data\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(X)\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n","\n","# Define the range of k values to try\n","k_values = np.arange(1, 21)  # You can adjust the range as needed\n","\n","# Initialize variables to store the best k value and corresponding R-squared\n","best_k = None\n","best_r2 = -float('inf')  # Initialize with negative infinity\n","\n","# Iterate over each k value\n","for k in k_values:\n","    # Train the KNN regression model\n","    knn = KNeighborsRegressor(n_neighbors=k)\n","    knn.fit(X_train, y_train)\n","\n","    # Make predictions\n","    y_pred = knn.predict(X_test)\n","\n","    # Calculate R-squared\n","    r2 = r2_score(y_test, y_pred)\n","\n","    # Check if the current k value has higher R-squared\n","    if r2 > best_r2:\n","        best_k = k\n","        best_r2 = r2\n","\n","# Print the best k value and corresponding R-squared\n","print(\"Best k value:\", best_k)\n","print(\"Best R-squared:\", best_r2)\n","\n","from sklearn.metrics import mean_squared_error\n","\n","# Train the KNN regression model using the best k value\n","best_knn = KNeighborsRegressor(n_neighbors=best_k)\n","best_knn.fit(X_train, y_train)\n","\n","# Make predictions on the test set\n","y_pred_test = best_knn.predict(X_test)\n","\n","# Calculate the Mean Squared Error (MSE) score\n","mse = mean_squared_error(y_test, y_pred_test)\n","\n","# Print the MSE score\n","print(\"Mean Squared Error (MSE):\", mse)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FbkkCapzfclF","executionInfo":{"status":"ok","timestamp":1714674002414,"user_tz":420,"elapsed":318,"user":{"displayName":"Teresa Chen","userId":"17006795700898442372"}},"outputId":"64b5a18a-b4b3-4b51-8487-b89087f06cfb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Best k value: 6\n","Best R-squared: 0.9874958212622013\n","Mean Squared Error (MSE): 199.67709865993925\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.metrics import r2_score\n","\n","# Prepare the data\n","X = train[['S', 'K', 'tau', 'r']]\n","y = train['Value']\n","\n","# Preprocess the data\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(X)\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n","\n","# Define the range of k values to try\n","k_values = np.arange(1, 21)  # You can adjust the range as needed\n","\n","# Initialize lists to store the R-squared scores for each k value\n","r2_scores = []\n","\n","# Iterate over each k value\n","for k in k_values:\n","    # Train the KNN regression model\n","    knn = KNeighborsRegressor(n_neighbors=k)\n","    knn.fit(X_train, y_train)\n","\n","    # Make predictions\n","    y_pred = knn.predict(X_test)\n","\n","    # Calculate R-squared and store it in the list\n","    r2 = r2_score(y_test, y_pred)\n","    r2_scores.append(r2)\n","\n","# Plot the relationship between k values and R-squared scores\n","plt.plot(k_values, r2_scores, marker='o')\n","plt.title('R-squared vs. k Value')\n","plt.xlabel('k Value')\n","plt.ylabel('R-squared')\n","plt.xticks(k_values)\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"3S6C793lmtoW","executionInfo":{"status":"ok","timestamp":1714674002992,"user_tz":420,"elapsed":581,"user":{"displayName":"Teresa Chen","userId":"17006795700898442372"}},"outputId":"b421e69c-a7be-4daa-e13c-aae380983ca1"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAkkAAAHHCAYAAACr0swBAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACFCUlEQVR4nO3dd1zV9fcH8Ne9l3EBGbKHzOtAUME9MrVEXD8lG2qmIpZfR1ZmaWpu82takoXmqBw5SsuR4xsOHGkqJiCpuAcoslVAkHXv5/cHcvPGRRn3cu+F1/Px4FH3c9/33HOB6z28p0gQBAFEREREpEKs6wSIiIiI9BGLJCIiIiI1WCQRERERqcEiiYiIiEgNFklEREREarBIIiIiIlKDRRIRERGRGiySiIiIiNRgkURERESkBoskIqqXRCIR5s6dq+s0yrl9+zZEIhG+/PJLXacCAOjRowd69Oih6zSIdIJFEpGBWr9+PUQikfLLyMgIbm5uGDVqFJKTk3WdHtWyHTt2QCQS4fvvv6+wzcGDByESifDNN9/UYmZEhstI1wkQUc3Mnz8f3t7eKCgowOnTp7F+/XqcOHECFy5cgFQq1XV6VEv69+8Pa2trbNmyBe+8847aNlu2bIFEIsHQoUNrOTsiw8SeJCID17dvXwwfPhzvvPMOvv/+e3z88ce4ceMGdu/erevUtCI/P1/XKeglU1NTvP766zh27Bju3btX7v6CggLs3LkTvXr1gqOjow4yJDI8LJKI6pgXX3wRAHDjxo3ntk1NTUVYWBgaNWoEU1NTuLi4ICQkBLdv31a2EQQBn332GRo1agRzc3O89NJLuHjxIry8vDBq1Chlu7lz50IkEpV7jrJhwadj/vbbb+jfvz9cXV1hamoKmUyGBQsWQC6Xqzy2R48eaNGiBWJiYtCtWzeYm5tjxowZAIDCwkLMmTMHjRs3hqmpKdzd3TF16lQUFhaqxCgsLMSHH34IBwcHWFpaYuDAgbh79+5zvzdpaWkwMjLCvHnzyt135coViEQiLF++HABQXFyMefPmoUmTJpBKpbCzs0PXrl1x8ODB5z5PZQiCgP/85z8wMTHBjh07Kmw3fPhwKBQK/Pzzz+Xu27dvH7Kzs/HWW28BANatW4eXX34Zjo6OMDU1hZ+fH1auXPncXNT9PAHg6NGjEIlEOHr0qMr16Oho9OnTB9bW1jA3N0f37t3x559/Pv9FE+kBDrcR1TFlH14NGzZ8btvXXnsNFy9exHvvvQcvLy+kp6fj4MGDSEpKgpeXFwBg9uzZ+Oyzz9CvXz/069cPsbGxCA4ORlFRUbVzXL9+PRo0aIDJkyejQYMGOHz4MGbPno2cnBx88cUXKm2zsrLQt29fDB06FMOHD4eTkxMUCgUGDhyIEydO4D//+Q+aN2+O8+fP46uvvsLVq1exa9cu5ePfeecdbNq0CcOGDUOXLl1w+PBh9O/f/7k5Ojk5oXv37ti2bRvmzJmjct/WrVshkUjwxhtvACgtEBctWoR33nkHHTp0QE5ODs6ePYvY2Fj06tWr2t8nAJDL5Rg9ejS2bt2KnTt3PjP3bt26oVGjRtiyZQsmT56sct+WLVtgbm6OV155BQCwcuVK+Pv7Y+DAgTAyMsKePXswYcIEKBQKvPvuuzXKuczhw4fRt29ftG3bFnPmzIFYLFYWZ8ePH0eHDh008jxEWiMQkUFat26dAEA4dOiQkJGRIdy5c0f49ddfBQcHB8HU1FS4c+fOMx//4MEDAYDwxRdfVNgmPT1dMDExEfr37y8oFArl9RkzZggAhNDQUOW1OXPmCOr+SSnL89atW8pr+fn55dqNHTtWMDc3FwoKCpTXunfvLgAQVq1apdJ248aNglgsFo4fP65yfdWqVQIA4c8//xQEQRDOnTsnABAmTJig0m7YsGECAGHOnDkVvnZBEITVq1cLAITz58+rXPfz8xNefvll5e2AgAChf//+z4xVWbdu3VL+XIqLi4UhQ4YIZmZmwv79+yv1+ClTpggAhCtXriivZWdnC1KpVHjzzTeV19T9DHr37i34+PioXOvevbvQvXt35W11P09BEIQjR44IAIQjR44IgiAICoVCaNKkidC7d2+V3538/HzB29tb6NWrV6VeD5EucbiNyMAFBQXBwcEB7u7ueP3112FhYYHdu3ejUaNGz3ycmZkZTExMcPToUTx48EBtm0OHDqGoqAjvvfeeylDapEmTapSzmZmZ8v9zc3ORmZmJF198Efn5+bh8+bJKW1NTU4SFhalc++WXX9C8eXP4+voiMzNT+fXyyy8DAI4cOQIA+N///gcAeP/991UeX9n8X331VRgZGWHr1q3KaxcuXEBCQgKGDBmivGZjY4OLFy/i2rVrlYpbGUVFRXjjjTewd+9e/O9//0NwcHClHjd8+HAApT1HZbZv346CggLlUBug+jPIzs5GZmYmunfvjps3byI7O7vG+Z87dw7Xrl3DsGHDkJWVpfwZ5eXloWfPnvjjjz+gUChq/DxE2sThNiIDt2LFCjRt2hTZ2dlYu3Yt/vjjD5iamirvLyoqwv3791Ue4+DgAFNTUyxevBgfffQRnJyc0KlTJ/zf//0fRo4cCWdnZwBAYmIiAKBJkyblHl+Z4byKXLx4ETNnzsThw4eRk5Ojct+/P6Dd3NxgYmKicu3atWu4dOkSHBwc1MZPT09X5i8WiyGTyVTub9asWaXytLe3R8+ePbFt2zYsWLAAQOlQm5GREV599VVlu/nz5yMkJARNmzZFixYt0KdPH4wYMQKtWrWq1POos2jRIjx69Ai///57lfYpatWqFVq0aIGffvpJuQ/Uli1bYG9vj969eyvb/fnnn5gzZw5OnTpVbjJ8dnY2rK2tq507AGXBGBoaWmGb7OzsGv0eEWkbiyQiA9ehQwe0a9cOAPDKK6+ga9euGDZsGK5cuYIGDRrg5MmTeOmll1Qec+vWLXh5eWHSpEkYMGAAdu3ahf3792PWrFlYtGgRDh8+jNatW1cpD3WTtgGUm4z98OFDdO/eHVZWVpg/fz5kMhmkUiliY2PxySeflOtdeLrHo4xCoUDLli0RHh6u9jnd3d2rlPuzDB06FGFhYTh37hwCAwOxbds29OzZE/b29so23bp1w40bN/Dbb7/hwIED+P777/HVV19h1apVFS7Hf57evXsjMjISS5YsQY8ePaq0ncPw4cMxbdo0nD17Fo0aNcKRI0cwduxYGBmV/pN/48YN9OzZE76+vggPD4e7uztMTEzwv//9D1999dUze3gq+3Mui/HFF18gMDBQ7WMaNGhQ6ddEpAsskojqEIlEgkWLFuGll17C8uXLMW3aNAQEBJRbZVXWUwQAMpkMH330ET766CNcu3YNgYGBWLp0KTZt2gRPT08Apb0CPj4+ysdkZGSUG6Ir6xF4+PAhbGxslNfLeqPKHD16FFlZWdixYwe6deumvH7r1q1Kv06ZTIb4+Hj07Nmzwg9tAPD09IRCocCNGzdUeo+uXLlS6ed65ZVXMHbsWOWQ29WrVzF9+vRy7WxtbREWFoawsDA8evQI3bp1w9y5c6tdJHXq1Anjxo3D//3f/+GNN97Azp07lUXO87z55puYPn06tmzZAk9PT8jlcpWhtj179qCwsBC7d++Gh4eH8nrZMOWzPP1zftq/f85lvXdWVlYICgqqVN5E+oZzkojqmB49eqBDhw5YtmwZCgoK0LBhQwQFBal8SaVS5Ofno6CgQOWxMpkMlpaWymX0QUFBMDY2RkREBARBULZbtmxZuect+1D8448/lNfy8vKwYcMGlXYSiQQAVOIVFRXh22+/rfRrHDx4MJKTk/Hdd9+Vu+/x48fIy8sDULqHFIByO0yry78iNjY26N27N7Zt24aff/4ZJiYmyhViZbKyslRuN2jQAI0bN1bZjiA7OxuXL1+u0nyfoKAg/Pzzz4iMjMSIESMqPYfHw8MDL774IrZu3YpNmzbB29sbXbp0Ud6v7meQnZ2NdevWPTe2up+zXC7HmjVrVNq1bdsWMpkMX375JR49elQuTkZGRqVeC5EusSeJqA6aMmUK3njjDaxfvx7jxo1T2+bq1avo2bMnBg8eDD8/PxgZGWHnzp1IS0tT7sjs4OCAjz/+GIsWLcL//d//oV+/foiLi8Pvv/+uMtwEAMHBwfDw8MDbb7+NKVOmQCKRYO3atXBwcEBSUpKyXZcuXdCwYUOEhobi/fffh0gkwsaNG1U+sJ9nxIgR2LZtG8aNG4cjR47ghRdegFwux+XLl7Ft2zbs378f7dq1Q2BgIN588018++23yM7ORpcuXRAVFYXr169X6fs5ZMgQDB8+HN9++y169+6t0lMGAH5+fujRowfatm0LW1tbnD17Fr/++ismTpyobLNz506EhYVh3bp1KvtLPc8rr7yCdevWYeTIkbCyssLq1asr9bjhw4fjP//5D+7du4dPP/1U5b7g4GCYmJhgwIABGDt2LB49eoTvvvsOjo6OSElJeWZcf39/dOrUCdOnT8f9+/dha2uLn3/+GSUlJSrtxGIxvv/+e/Tt2xf+/v4ICwuDm5sbkpOTceTIEVhZWWHPnj2V/j4Q6YRuF9cRUXWVLcX+66+/yt0nl8sFmUwmyGQyoaSkRO3jMzMzhXfffVfw9fUVLCwsBGtra6Fjx47Ctm3bysWaN2+e4OLiIpiZmQk9evQQLly4IHh6eqpsASAIghATEyN07NhRMDExETw8PITw8HC1S8b//PNPoVOnToKZmZng6uoqTJ06Vdi/f7/KEnJBKF1+7u/vrzb/oqIiYfHixYK/v79gamoqNGzYUGjbtq0wb948ITs7W9nu8ePHwvvvvy/Y2dkJFhYWwoABA4Q7d+5UaguAMjk5OYKZmZkAQNi0aVO5+z/77DOhQ4cOgo2NjWBmZib4+voKCxcuFIqKipRtyr4P69ate+ZzPb0FwNO+/fZbAYDw8ccfVyrn+/fvC6ampgIAISEhodz9u3fvFlq1aiVIpVLBy8tLWLx4sbB27dpyP6t/bwEgCIJw48YNISgoSDA1NRWcnJyEGTNmCAcPHiz38xMEQYiLixNeffVVwc7OTjA1NRU8PT2FwYMHC1FRUZV6HUS6JBKEKvz5RkT0hJeXF3r06IH169frOhUiIq3gnCQiIiIiNVgkEREREanBIomIiIhIDc5JIiIiIlKDPUlEREREarBIIiIiIlKDm0lWk0KhwL1792BpafnMYxGIiIhIfwiCgNzcXLi6ukIsfnZfEYukarp3755GD9EkIiKi2nPnzh00atTomW1YJFWTpaUlgNJvspWVlUZjFxcX48CBAwgODoaxsbHBxGZ83cU29PiGnLuhxzfk3A09viHnru342oydk5MDd3d35ef4s7BIqqayITYrKyutFEnm5uawsrLSyi+etmIzvu5iG3p8Q87d0OMbcu6GHt+Qc9d2fG3nDqBSU2U4cZuIiIhIDRZJRERERGqwSCIiIiJSg0USERERkRoskoiIiIjUYJFEREREpAaLJCIiIiI1WCQRERERqcEiiYiIiEgNFklEtUCuEBB96z5iMkWIvnUfcoWg65SIiOg5eCwJkZZFXkjBvD0JSMkuACDBj9fOwsVaijkD/NCnhYuu0yMiogqwJ4lIiyIvpGD8ptgnBdI/UrMLMH5TLCIvpOgoMyIieh4WSURaIlcImLcnAeoG1squzduTwKE3IiI9xSKJSEvO3LpfrgfpaQKAlOwCnLl1v/aSIiKiSmORRKQl6bkVF0jVaUdERLWLRRKRljhaSjXajoiIaheLJCIt6eBtCxdrKUQV3C8C4GItRQdv29pMi4iIKolFEpGWSMQizBngp3biNlA6J2nOAD9IxBWVUUREpEsskoi0qJefM+wsTNTe95KvA/dJIiLSYyySiLToYEIasvKKYGNmhLUj22BkEzmm9m4CADh1IwtZjwp1nCEREVWERRKRFq0/eQsAMKyjJ15sYo+29gLeecELLd2sUVCswPqTt3WbIBERVYhFEpGWXErJwemb9yERizC8k6fyukgkwoQeMgDA+pO3kVtQrKsUiYjoGVgkEWnJ+j9vAwD6tHCGq42Zyn29/Z0hc7BAbkEJNp1O0kF2RET0PCySiLTgfl4Rdp1LBgCMfsGr3P1isQjjezQGAPxw4hYKiuW1mR4REVUCiyQiLfjpTBIKSxRo6WaNNh4N1bYJCXSFm40ZMh8V4pezd2o5QyIieh4WSUQaVixXYOOpRABA2AteEInU74NkLBHjP918AACrjt1EsVxRazkSEdHzsUgi0rDIC6lIzSmAfQNT9G/17H2QhrR3h30DEyQ/fIw98fdqKUMiIqoMFklEGla2rP+tjh4wNZI8s63UWILRXb0BAN8evQGFoqL9uYmIqLaxSCLSoL/vPkRM4gMYS0R4q5NHpR4zvJMnLE2NcD39EQ4kpGk5QyIiqiwWSUQatO7Jsv//a+UKR0tppR5jJTXGyC6l+yitPHodgsDeJCIifcAiiUhD0nMLsPfv0nlFo7p4VemxYS94Q2osRvzdbPx5PUsL2RERUVWxSCLSkM2nk1AsF9DGwwYB7jZVeqx9A1MMbV86PLfiyHUtZEdERFXFIolIAwpL5NgcXbbs37taMcZ084GRWIRTN7MQm/RAk+kREVE1sEgi0oB9f6cg81ERnK2k6NPCuVox3GzMMKi1GwDg2yM3NJkeERFVA4skohoSBEE5YXtEZ08YS6r/thrXQwaRCDh0KQ2XU3M0lCEREVUHiySiGopNeoDzydkwMRLjzQ6VW/ZfEZlDA/R90hO18ih7k4iIdEkviqQVK1bAy8sLUqkUHTt2xJkzZypsW1xcjPnz50Mmk0EqlSIgIACRkZEqbeRyOWbNmgVvb2+YmZlBJpNhwYIFKkurRSKR2q8vvvhCa6+T6qa1T3qRXgl0ha2FSY3jTXhy8O2e+HtIysqvcTwiIqoenRdJW7duxeTJkzFnzhzExsYiICAAvXv3Rnp6utr2M2fOxOrVqxEREYGEhASMGzcOgwYNQlxcnLLN4sWLsXLlSixfvhyXLl3C4sWLsWTJEkRERCjbpKSkqHytXbsWIpEIr732mtZfM9Ud9x4+RuSFVADVn7D9by3crNG9qQMUArDqD/YmERHpis6LpPDwcIwZMwZhYWHw8/PDqlWrYG5ujrVr16ptv3HjRsyYMQP9+vWDj48Pxo8fj379+mHp0qXKNidPnkRISAj69+8PLy8vvP766wgODlbpoXJ2dlb5+u233/DSSy/Bx8dH66+Z6o5NpxMhVwjo5GOL5i5WGos7oYcMAPDr2btIyynQWFwiIqo8I10+eVFREWJiYjB9+nTlNbFYjKCgIJw6dUrtYwoLCyGVqu5kbGZmhhMnTihvd+nSBWvWrMHVq1fRtGlTxMfH48SJEwgPD1cbMy0tDfv27cOGDRsqzLWwsBCFhYXK2zk5pZNqi4uLUVxc/PwXWwVl8TQdV9ux61v8gmI5fjqTBAAY0dH9uY+pSuzWjSzR1sMGMUkPsebYdUzr0+y5j9Gn740+xWZ83cVmfN3FNvT4tRG7MkSCDs9AuHfvHtzc3HDy5El07txZeX3q1Kk4duwYoqOjyz1m2LBhiI+Px65duyCTyRAVFYWQkBDI5XJlEaNQKDBjxgwsWbIEEokEcrkcCxcuVCnGnrZkyRJ8/vnnuHfvXrkCrMzcuXMxb968cte3bNkCc3Pz6rx8MnCn0kT4+aYEtqYCZrWWQyzSbPyLD0RYc1kCE7GAuW3ksDDWbHwiovooPz8fw4YNQ3Z2Nqysnj0CoNOepOr4+uuvMWbMGPj6+kIkEkEmkyEsLExleG7btm3YvHkztmzZAn9/f5w7dw6TJk2Cq6srQkNDy8Vcu3Yt3nrrrQoLJACYPn06Jk+erLydk5MDd3d3BAcHP/ebXFXFxcU4ePAgevXqBWNjzX4yajN2fYovCAK+XXEKwCOM6dEM/9fVS2Oxy/QVBPzx7WlcTs1FqmUzvPeyTKPxq4q/l3UzviHnbujxDTl3bcfXZuyykaDK0GmRZG9vD4lEgrQ01ZPP09LS4OysfkM+BwcH7Nq1CwUFBcjKyoKrqyumTZumMpdoypQpmDZtGoYOHQoAaNmyJRITE7Fo0aJyRdLx48dx5coVbN269Zm5mpqawtTUtNx1Y2NjrfzyGXLs+hD/5I1MXEl7BDNjCYZ19KpSLlXJ/d2XGuO9n+LwY3QSxvZoDAvT579ldf290dfYjK+72Iyvu9iGHl8bsasST6cTt01MTNC2bVtERUUprykUCkRFRakMv6kjlUrh5uaGkpISbN++HSEhIcr78vPzIRarvjSJRAKFQlEuzg8//IC2bdsiICCghq+G6pP1T5b9v9bWDdbm2vvHp19LF3jZmeNhfrFy/hMREdUOna9umzx5Mr777jts2LABly5dwvjx45GXl4ewsDAAwMiRI1XmEkVHR2PHjh24efMmjh8/jj59+kChUGDq1KnKNgMGDMDChQuxb98+3L59Gzt37kR4eDgGDRqk8tw5OTn45Zdf8M4779TOi6U64c79fBy8VNr7OaqLl1afSyIWYfyTlW7fHb+JwhK5Vp+PiIj+ofM5SUOGDEFGRgZmz56N1NRUBAYGIjIyEk5OTgCApKQklV6hgoICzJw5Ezdv3kSDBg3Qr18/bNy4ETY2Nso2ERERmDVrFiZMmID09HS4urpi7NixmD17tspz//zzzxAEAW+++WatvFaqG348dRuCALzYxB6NHS21/nyDWjfCVwevITWnADtik2u8qzcREVWOzoskAJg4cSImTpyo9r6jR4+q3O7evTsSEhKeGc/S0hLLli3DsmXLntnuP//5D/7zn/9UJVWq5/IKS/DzX3cAAKM1tHnk85gYiTGmmw8W7E3AqmM38EbbRjCqwflwRERUOfyXlqgKdsTeRW5BCbztLdC9qUOtPe+bHdzR0NwYiVn52Hc+pdael4ioPmORRFRJCoWA9SdvAwBCO3tCrOmNkZ7B3MRIeezJyqM3UNvbm8kVAqJv3UdMpgjRt+5DrtDZ9mpERLVGL4bbiAzB8euZuJGRhwamRnitbaNaf/7Qzl5YfewGLqfm4vDldPRs7lQrzxt5IQXz9iQgJbsAgAQ/XjsLF2sp5gzwQ58WLrWSAxGRLrAniaiS1v15CwDwRrtGsJTW/vbX1ubGGN7ZEwCw4sj1WulNiryQgvGbYp8USP9IzS7A+E2xiLzAoT8iqrtYJBFVws2MRzh6JQMiUWmPjq683dUbJkZixCY9RPSt+1p9LrlCwLw9CVBXipVdm7cngUNvRFRnsUgiqoQNT+YivdzMEV72FjrLw9FSisHtSof6Vhy5rtXnOnPrfrkepKcJAFKyC3BGy8UaEZGusEgieo6cgmL8GnMXAJSTp3VpbDcZJGIRjl/LxPm72Vp5jpyCYmyJrtwO3+m5FRdSRESGjEUS0XP8cvYu8orkaOLYAC80ttN1OnC3NUdIgCsA4Nujmu1NSs8twOLIy3hh0WHs+ftepR7jaFnxwdD1AVf+EdVdXN1G9AxyhaAcahv1ghdEotpb9v8s43rIsCMuGZEXU3E9PbfGO38nZuVhzR838UvMXRSVlJ5x2NjBAhmPipDzuFjtvCQAcLGWooO3bY2e25Bx5R9R3caeJKJnOHI5HUn382FtZoxBrd10nY5SUydLBPs5QRCAlUdvVjvOxXvZeO+nOLz05VFsjk5CUYkCrT1s8N3IdjjwYXcsfq0lAKCi0rBRQ7MK76vruPKPqO5jkUT0DOtOli77H9reHeYm+tXxOuGlxgCA384l4+6D/Eo/ThAEnL6ZhdC1Z9D/mxPYE38PCgHo0cwBW//TCTvGd0EvPyeIxSL0aeGClcPbwNladUjN1twYYhHw1+0HmL37Qq1vbqlrXPlHVD/o17/6RHrkalou/ryeBbEIGPFkfyJ9Euhugxca2+HP61n47o+bmNmv2TPbKxQCDl1Kw8pjNxCX9BAAIBYB/9fKFeO6y+DnaqX2cX1auKCXnzNOXU/HgePRCH6xIzo3dsTev+9h0tZz2HQ6CTZmJvi497Ofv64QBAE745IrvfKvs0z389iIqHpYJBFVYN2ftwEAwX7OaNTQXLfJVODdHo3x5/Us/HQmCR28bBCTKYLdrfvo3NgRkifHphTLFfjt3D2sOnYD19MfASg9NHdwu0b4z4syeNg9/7VJxCJ09LZF1iUBHb1tIRGLEBLohtyCEszcdQHLj1yHtZkxxnTz0err1ZWsR4X480YWjl/NwInrmc8skJ7GlX9Eho1FEpEaD/OLsTOubNm/l26TeYbOMjt42ZnjdlY+3v0pHk9PHp7W1xdZj4rw/fGbuPfkQ93S1AgjOnsi7AVvOFia1vj5h3fyRPbjYnyx/woW/u8SrMyMMKS9R43jatLTq8/+XUBWpKBYjpjEBzh+LRPHr2Xg4r0clfuNxCKUVGIorb6v/CMydCySiNTYFnMXBcUK+LlY6fXqrf0XU3E7q/x8pJTsAnzw8znlbQdLU7zd1RvDOnrASsNHqkzoIUPO42Ks/uMmpu84D0upMfq11I+VXZVdfSYIAi6n5uLEtUwcv56JM7eyUFCsUInV3MUKLzaxR9fG9mjr2RBB4ceQml2gdl6SCIBzPV/5R1QXsEgi+he5AGyKvgNAv5b9/1vZ5OFnkYhFmDfQH6+3bQSpsUQreYhEIkzr64vsx8X4+a87+ODnOFiYGqF7UwetPF9lla0++3cRU7b67PNXW8JIIsaJ65k4cT0TGbmFKu0cLU3RtYk9ujVxwAuN7cv1vM0Z4Ifxm2IhAtQWSnMG+D23x4qI9BuLJKJ/OX9fhJTsAthZmGDgk00b9dHzjg0BSgspmUMDrRVIZUQiERYOaoncghLsO5+CcRtjsOmdDmjrqZuelMqsPvtkx3mV62bGEnT0sUXXxvbo1tQBTRwbPLNALlv5909P1T++fCOA+yQR1QEskoieKJu7si+pdGeMoR3ctV5c1ERlJwXX1uRhiViEr4YEIrewBH9czUDYur+wdWxnNHdRv2pOmypTQAKAt70F+rZwRtcmpUNopkZV+3k/vfJv/x/ROJplgTsPCvAgv6i6qRORHuE+SUQoHZrpuvgwhq89i/SC0t6DX87e1esNASs7Kbg2Jw+bGImxangbtPNsiJyCEoz44QxuZebV2vOXqWxhOCmoCab28UUXmX2VC6QyZSv/2jkI+M+Lpav7Np5OhIJ7JBEZPBZJVO9VtHNyRm6hXu+c3MHbFi7W0gp3vBZBN8eGmJsY4YdR7dHcxQqZjwox/PtopGQ/rrXnf1wkx8kbWZVqq+kCcmCAMyylRkjMysexaxkajU1EtY9FEtVrhrxzskQswpwBfgDKHxtSdltXk4etzYzx4+gO8LIzR/LDxxjxwxncz9PuEJRcIWDb2Tt46cuj2PrXnWe21VYBaW5ihDfaugMAfnxy5h8RGS4WSVSvPW/uytM7J+ujio4NcbaWYuXwNjqdPOxgaYpN73SEs5UU19MfYdS6M8gtKNb48wiCgCNX0tHv6+OY+uvfSM0pgJuNGcJe8IIItV9Alu3OfvRqBhKzan+okYg0hxO3qV7Tt8nP1VHRsSH6sPy8UUNzbHqnAwavPo2/72ZjzI9nsT6sg8YmxJ+/m41Fv19SDq9ZSY3w3stNMKKzJ6TGEnT0ti23+sxZzT5JmuRtb4FuTR3wx9UMbDqdiE/7+2nleYhI+1gkUb2mj5Ofq0PdsSH6orGjJTaEdcCb353G6Zv3MXFLLFYObwtjSfU7su/cz8eXB67gt3P3AAAmEjFCu3ji3Zcaw8bcRNlOVwVkaGdP/HE1A9vO3sXkXs1gZqK/qySJqGIcbqN6rYO3Lcyf8QGmq8nPdU3LRtb4PrQdTI3EOHQpHVN//btaq78e5hdh4b4E9Fx6TFkgvRLoiqiPuuPT/n4qBVKZsgKyrX3tFZA9mjmiUUMzZD8uxu74ZK0/HxFpB4skqtdO3shEfpFc7X26nvxc13TyscO3b7WBRCzCzrhkzN1zEYJQuUKpoFiONX/cQLclR/Dd8VsokivQRWaHPRO7YtnQ1nC31a8DiCViEUZ0Kp2btOFkYqVfJxHpFxZJVG9lPy7GlF/+BgB0b+oAFz2c/FzX9GzuhKVvBEAkAn48lYjwg1dVDqCNvnVfZSWhQiFgV1wyei49hv/+7zJyCkrQzMkS68LaY/M7HdGykbUOX82zDW7nDlMjMRJSchCb9EDX6RBRNXBOEtVb83ZfRGpOAbzszLFyeBuYGkn0cvJzXfNKazfkFhRj1m8XEXH4OtafvI3cghL8+wBaS6kx/vu/S7h4LwcA4GwlxeTgpnitTSOD+Lk0fHKszS8xd/HjqUSdHdFCRNXHIonqpcgLqdgRlwyxCFg6OBDmJqVvBX2d/FzXjOjshb9u38fu+JQnBdI/UrILMG5TrPJ2A1MjjO8hw+gXvA1uAnRoFy/8EnMX/zufgk/7N9f7BQBEpIrDbVTvZD4qxKc7Sw83HdddhraeDXWcUf0jVwg4c/v5Q1AjO3vi2JQeePelxgZXIAFACzdrtPawQbFcwM9nnr3BJRHpHxZJVK8IgoAZO84jK68Ivs6W+CCoia5TqpfO3LqP1EocQNu3hQvsGpjWQkbaE9rZCwCwJToJxXKFbpMhoiphkUT1yo7YZBxISIOxpPTE+uoeako1Uxc28aysvi2dYWdhgtScAhxMSNN1OkRUBSySqN5IfvgYc3dfBABMCmqK5i5WOs6o/qorm3hWhqmRBG928AAA/Hjqtm6TIaIqYZFE9YJCIWDqr/HILSxBaw8bjO3mo+uU6rUO3rZwsZaWO1etTF3bxHNYRw+IRcDpm/dxJTVX1+kQUSWxSKJ6YePpRPx5PQtSYzHCBwfCqAZHYlDNScQizBlQeqZZbR9AqwuuNmYI9nMGAGw8fVu3yRBRpfGTguq8mxmPsOj3SwCA6X2bw9veQscZEVB6rtrK4W3gXE828RzZuXQH7h2xycgpKNZxNkRUGdwnieq0ErkCH/0Sj4JiBbo2tlceFUH6QVcH0OpCZ5kdGjs2wPX0R9gRcxejXvDWdUpE9BzsSaI6bfUfNxGX9BCWUiMseb0VxHXww9fQ6eIAWl0QiUTK3qQfT/M8NyJDwCKJ6qyEezlYdugqAGDuAH+42pjpOCOq715t0wgNTI1wMyMPf17P0nU6RPQcLJKoTioskWPytnMolgsI9nPCq23cdJ0SERqYGil/FzdwOwAivcciieqkZYeu4XJqLuwsTPDfV1tCJKqbQzhkeMqG3KIupeHug3wdZ0NEz8IiieqcmMT7WH3sBgBg4aCWsDfwYy2obmnsaIkXGttBIQCbo5N0nQ4RPYPOi6QVK1bAy8sLUqkUHTt2xJkzZypsW1xcjPnz50Mmk0EqlSIgIACRkZEqbeRyOWbNmgVvb2+YmZlBJpNhwYIF5SZJXrp0CQMHDoS1tTUsLCzQvn17JCXxHyxDl19Ugo+2xUMhAK+2dkOfFs66TomonBGdvAAAP59JQkGxXLfJEFGFdFokbd26FZMnT8acOXMQGxuLgIAA9O7dG+np6Wrbz5w5E6tXr0ZERAQSEhIwbtw4DBo0CHFxcco2ixcvxsqVK7F8+XJcunQJixcvxpIlSxAREaFsc+PGDXTt2hW+vr44evQo/v77b8yaNQtSqeEfgVDfff77ZdzOyoeLtRRzBvrrOh0itYKaO8LVWooH+cXY93eKrtMhogrotEgKDw/HmDFjEBYWBj8/P6xatQrm5uZYu3at2vYbN27EjBkz0K9fP/j4+GD8+PHo168fli5dqmxz8uRJhISEoH///vDy8sLrr7+O4OBglR6qTz/9FP369cOSJUvQunVryGQyDBw4EI6Ojlp/zaQ9J65l4sdTiQCAJa+3grWZsY4zIlLPSCLGW0/27OJ5bkT6S2ebSRYVFSEmJgbTp09XXhOLxQgKCsKpU6fUPqawsLBcb4+ZmRlOnDihvN2lSxesWbMGV69eRdOmTREfH48TJ04gPDwcAKBQKLBv3z5MnToVvXv3RlxcHLy9vTF9+nS88sorFeZbWFiIwsJC5e2cnBwApUOAxcWa3T23LJ6m42o7ti7j5zwuxse/nAMADO/ojk5eNtXKgd973cQ35NyrG/+1QGcsO3QV8XezcfZWJgIaWWs0fmXp4/emvsQ35Ny1Hb82YleGSNDRjmb37t2Dm5sbTp48ic6dOyuvT506FceOHUN0dHS5xwwbNgzx8fHYtWsXZDIZoqKiEBISArlcrixgFAoFZsyYgSVLlkAikUAul2PhwoXKYiw1NRUuLi4wNzfHZ599hpdeegmRkZGYMWMGjhw5gu7du6vNd+7cuZg3b16561u2bIG5ubkmviVUA5uuifFXphj2UgFTW8lhKtF1RkTPt/GaGGczxWjvoMDwxgpdp0NUL+Tn52PYsGHIzs6GlZXVM9sa1LEkX3/9NcaMGQNfX1+IRCLIZDKEhYWpDM9t27YNmzdvxpYtW+Dv749z585h0qRJcHV1RWhoKBSK0n+IQkJC8OGHHwIAAgMDcfLkSaxatarCImn69OmYPHmy8nZOTg7c3d0RHBz83G9yVRUXF+PgwYPo1asXjI01O2Skzdi6in8gIQ1/nYqHWAR8O6IjWnvYaDS+ptTF770hxNbn+K53HuKNNWcQ/8AIEd27wc7CRKPxK0Nfvzf1Ib4h567t+NqMXTYSVBk6K5Ls7e0hkUiQlpamcj0tLQ3OzupXJDk4OGDXrl0oKChAVlYWXF1dMW3aNPj4+CjbTJkyBdOmTcPQoUMBAC1btkRiYiIWLVqE0NBQ2Nvbw8jICH5+fiqxmzdvrjJs92+mpqYwNS2/lNzY2Fgrv3yGHLs242c+KsTs3aWH147tLkMHmYNG42tDXfneG1psfYzfztseLd2scT45GzvOpWBCj8YajV8V+va9qU/xDTl3bcfXRuyqxNPZxG0TExO0bdsWUVFRymsKhQJRUVEqw2/qSKVSuLm5oaSkBNu3b0dISIjyvvz8fIjFqi9LIpEoe5BMTEzQvn17XLlyRaXN1atX4enJw08NiSAImLHjPLLyiuDrbIlJQU10nRJRlTx9ntvm00mQK3ieG5E+0elw2+TJkxEaGop27dqhQ4cOWLZsGfLy8hAWFgYAGDlyJNzc3LBo0SIAQHR0NJKTkxEYGIjk5GTMnTsXCoUCU6dOVcYcMGAAFi5cCA8PD/j7+yMuLg7h4eEYPXq0ss2UKVMwZMgQdOvWTTknac+ePTh69Gitvn6qmR2xyTiQkAZjiQjhgwNhasSJSGR4BgS4YuH/LiH54WNEXUpDsD/39iLSFzotkoYMGYKMjAzMnj0bqampCAwMRGRkJJycnAAASUlJKr1CBQUFmDlzJm7evIkGDRqgX79+2LhxI2xsbJRtIiIiMGvWLEyYMAHp6elwdXXF2LFjMXv2bGWbQYMGYdWqVVi0aBHef/99NGvWDNu3b0fXrl1r7bVTzaRkF2Du7osAgElBTeHnqtl5YUS1RWoswZD27lh97CY2nk5kkUSkR3Q+cXvixImYOHGi2vv+3bPTvXt3JCQkPDOepaUlli1bhmXLlj2z3ejRo1V6l0j/yRUCom/dx9kMEdZsjkNuYQlae9hgbDef5z+YSI8N7+iJNX/cxPFrmbiR8Qgyhwa6TomIoAdFElFlRF5Iwbw9CUjJLgAgAZALAHgl0A1GEp2frkNUI+625ujp64hDl9Kx8VQi5nK3eCK9wE8X0nuRF1IwflPskwJJ1dzdFxF5gcc6kOEb0dkLALA95i4eFZboNhkiAsAiifScXCFg3p4EPGvNz7w9CVwVRAbvxcb28La3QG5hCXbGJes6HSICiyTSc2du3Vfbg1RGQOkk7jO37tdeUkRaIBaLMOLJeW4bT92Gjg5DIKKnsEgivZaeW3GBVJ12RPrstbaNYGYswdW0Rzh9k4U/ka6xSCK95mgpfX6jKrQj0mfWZsYY1MYNALDx9G3dJkNELJJIv3XwtoWLdcUFkAiAi7UUHbxtay8pIi0q24F7/8U0pGQ/1nE2RPUbiyTSaxKxCHMG+Km9T/Tkv3MG+EEiFqltQ2RofJ2t0MHbFnKFgJ+ik3SdDlG9xiKJ9F4vP2c0MC2/pZeztRQrh7dBnxYuOsiKSHvKepO2nLmDohKFjrMhqr+4mSTpvTO37uNRYQmszYzw9eBWOHzyLwS/2BGdGzuyB4nqpN7+znC0NEV6biF+v5CCfv6Ouk6JqF5iTxLpvf0XUwGU9ii90Ngebe0FdPS2ZYFEdZaxRIxhHT0AABtO3kb0rfuIyRQh+tZ97glGVItYJJFeUygERF4oLZL6tuDBn1R/DOvgAbEIiE16iOFrz+LHaxIMX3sWXRcf5i7zRLWERRLptfi7D5GaUwALEwleaGyv63SIak1s0gOo6zRKzS7A+E2xLJSIagGLJNJrkU+G2l7ydYTUWKLjbIhqR9lxPOqU1U08jodI+1gkkd4ShKeH2riCjeoPHsdDpB9YJJHeupyai8SsfJgaidGjmYOu0yGqNTyOh0g/sEgivVXWi9StqQMs1OyTRFRX8TgeIv3AIon0VlmR1Mefq9qofik7jqeiTS54HA9R7WCRRHrpZsYjXEnLhZFYhKDmTrpOh6hWPX0cT0WFEo/jIdI+Fkmkl8pWtXWW2cHa3FjH2RDVvj4tXLByeBs4qzngeUh7dx7HQ1QLWCSRXtpfNtTGDSSpHuvTwgUnPnkZm0a3w8gmcoR2cgcA7DufgozcQh1nR1T3sUgivZP88DHi72ZDJAKC/VgkUf0mEYvQ0dsWbe0FTO/rixZuVsgtKMHnv1/WdWpEdR6LJNI7Zb1I7T1t4WBpquNsiPSHRCzCgpAWEImA7bF38ddt7pNEpE0skkjvlM1H4lAbUXmtPRpiaPvSYbdZuy6gRK7QcUZEdReLJNIrGbmFyr+Oe7NIIlJrSm9f2Jgb43JqLjacStR1OkR1Fosk0isHE9IgCECrRtZwszHTdTpEesnWwgSf9PEFAHx18CrSc7jzNpE2sEgivfL7k5PNOdRG9GxD2rkjwN0GjwpLsPB/l3SdDlGdxCKJ9EZ2fjFO3cgCwF22iZ5HLBbhsyeTuH87d0/53iEizWGRRHoj6nIaShQCmjlZwsehga7TIdJ7LRtZ462OHgCA2b9dQDEncRNpFIsk0hu/P1n6zwnbRJU3JdgXthYmuJb+COv+vKXrdIjqFBZJpBfyCkvwx9UMABxqI6oKa3NjTOtbOol72aFrSMl+rOOMiOoOFkmkF45eyUBhiQKeduZo7mKp63SIDMrrbRqhrWdD5BfJ8dk+TuIm0hQWSaQXlBtI+jtDJOLJ5kRVIRaLMD/EH2IRsO/vFJy4lqnrlIjqBBZJpHMFxXIcvpQGgEv/iarL39UaIzt7ASidxF1YItdtQkR1AIsk0rk/r2cir0gOZyspAhrZ6DodIoM1Obgp7BuY4mZmHr4/zkncRDXFIol0LrJsVZu/E8RiDrURVZeV1Bif9i+dxB1x+BqSH3ISN1FNsEginSqWK3BQOdTmouNsiAzfK4Fu6OBti4JiBebvuajrdIgMGosk0qkzt+7jYX4xbC1M0N6roa7TITJ4IpEIC0JaQCIWYf/FNBy5kq7rlIgMFosk0qmyobZgPycYSfjrSKQJzZwtEdbFCwAwd/dFFBRzEjdRdfBTiXRGoRCw/yJ32SbShkm9msLJyhSJWflY88dNXadDZJBYJJHOxN15gPTcQliaGqGLzE7X6RDVKQ1MjfBpfz8AwIoj13Hnfr6OMyIyPCySSGd+P1/ai9SzuSNMjSQ6zoao7hnQygVdZHYoLFFgHidxE1WZXhRJK1asgJeXF6RSKTp27IgzZ85U2La4uBjz58+HTCaDVCpFQEAAIiMjVdrI5XLMmjUL3t7eMDMzg0wmw4IFCyAIgrLNqFGjIBKJVL769OmjtddIqgRB+GeXbQ61EWmFSCTC/JAWMJaIcOhSOg4lpOk6JSKDovMiaevWrZg8eTLmzJmD2NhYBAQEoHfv3khPV78iY+bMmVi9ejUiIiKQkJCAcePGYdCgQYiLi1O2Wbx4MVauXInly5fj0qVLWLx4MZYsWYKIiAiVWH369EFKSory66efftLqa6V/XLyXg7sPHkNqLEb3po66Toeozmrs2ABvd/UBAMzdw0ncRFWh8yIpPDwcY8aMQVhYGPz8/LBq1SqYm5tj7dq1attv3LgRM2bMQL9+/eDj44Px48ejX79+WLp0qbLNyZMnERISgv79+8PLywuvv/46goODy/VQmZqawtnZWfnVsCGXoNeWslVtPZo6wsyEQ21E2vR+z8ZwtZbi7oPH+PbIdV2nQ2QwjHT55EVFRYiJicH06dOV18RiMYKCgnDq1Cm1jyksLIRUKlW5ZmZmhhMnTihvd+nSBWvWrMHVq1fRtGlTxMfH48SJEwgPD1d53NGjR+Ho6IiGDRvi5ZdfxmeffQY7O/UTiAsLC1FYWKi8nZOTA6B0+K+4uLhqL/w5yuJpOq62Y1cl/u8XUgAAQc0dqpSLvuSvb7ENPb4h524I8Y1FwPS+zfDez/FYeewGBrZyhqeduUZiPw/j6ya2ocevjdiVIRKenqhTy+7duwc3NzecPHkSnTt3Vl6fOnUqjh07hujo6HKPGTZsGOLj47Fr1y7IZDJERUUhJCQEcrlcWcQoFArMmDEDS5YsgUQigVwux8KFC1WKsZ9//hnm5ubw9vbGjRs3MGPGDDRo0ACnTp2CRFK+Z2Pu3LmYN29euetbtmyBubm5Jr4d9UZqPrAo3ggSkYCF7eQw02mpTlQ/CAKw6pIYl7PFaG6jwFhfBUQ8BYjqofz8fAwbNgzZ2dmwsrJ6ZluD+3j6+uuvMWbMGPj6+kIkEkEmkyEsLExleG7btm3YvHkztmzZAn9/f5w7dw6TJk2Cq6srQkNDAQBDhw5Vtm/ZsiVatWoFmUyGo0ePomfPnuWed/r06Zg8ebLydk5ODtzd3REcHPzcb3JVFRcX4+DBg+jVqxeMjY0NJnZl43979CaA6+ja2AGvDWyj8fg1Ude/9/oa35BzN6T4/p3y0C/iJC49FMPYuzWC/ZwMJve6GN+Qc9d2fG3GLhsJqgydFkn29vaQSCRIS1NdcZGWlgZnZ/UrnhwcHLBr1y4UFBQgKysLrq6umDZtGnx8fJRtpkyZgmnTpikLoZYtWyIxMRGLFi1SFkn/5uPjA3t7e1y/fl1tkWRqagpTU9Ny142NjbXyy2fIsZ8X/+Dl0kn5/Vq5VDsHXeavz7ENPb4h524I8Zs422BcdxkiDl/Hwv9dwUvNnZXx9D33uhzfkHPXdnxtxK5KPJ1O3DYxMUHbtm0RFRWlvKZQKBAVFaUy/KaOVCqFm5sbSkpKsH37doSEhCjvy8/Ph1is+tIkEgkUCkWF8e7evYusrCy4uPCQVW26cz8fF5JzIBYBQc2ddJ0OUb0zoUdjuNmY4V52AZYf5iRuomfR+eq2yZMn47vvvsOGDRtw6dIljB8/Hnl5eQgLCwMAjBw5UmUuUXR0NHbs2IGbN2/i+PHj6NOnDxQKBaZOnapsM2DAACxcuBD79u3D7du3sXPnToSHh2PQoEEAgEePHmHKlCk4ffo0bt++rZzX1LhxY/Tu3bt2vwH1TNkxJB28bWHXoHzPHBFpl5mJBHMH+gMA1vxxAzvi7iEmU4ToW/chV+hsiiqRXqr0cFvDhg0hquQsv/v371c6gSFDhiAjIwOzZ89GamoqAgMDERkZCSen0l6GpKQklV6hgoICzJw5Ezdv3kSDBg3Qr18/bNy4ETY2Nso2ERERmDVrFiZMmID09HS4urpi7NixmD17NoDSXqW///4bGzZswMOHD+Hq6org4GAsWLBA7ZAaac7vT5b+923BHjsiXQlq7ogWbla4kJyDT3ZcACDBj9fOwsVaijkD/NCH708iAFUokpYtW6b8/6ysLHz22Wfo3bu3cljs1KlT2L9/P2bNmlXlJCZOnIiJEyeqve/o0aMqt7t3746EhIRnxrO0tMSyZctUcn6amZkZ9u/fX+U8qWbScwoQk/gAANDbn7tsE+nK/oupuJBcfvJqanYBxm+KxcrhbVgoEaEKRdLTE55fe+01zJ8/X6Wwef/997F8+XIcOnQIH374oWazpDph/5MjEVp72MDZWvqc1kSkDXKFgHl71P+hKQAQAZi3JwG9/JwhEXOPAKrfqjUnaf/+/WrPOevTpw8OHTpU46Sobop8soFkH/YiEenMmVv3kZJdUOH9AoCU7AKcuVX5aRNEdVW1iiQ7Ozv89ttv5a7/9ttvFe5YTfXbg7winL5Z+o8uD7Ql0p303IoLpOq0I6rLqrVP0rx58/DOO+/g6NGj6NixI4DSVWeRkZH47rvvNJog1Q0HL6VBrhDQ3MUKnnYWuk6HqN5ytKzcUHdl2xHVZdUqkkaNGoXmzZvjm2++wY4dOwAAzZs3x4kTJ5RFE9HT9j9Z1cahNiLd6uBtCxdrKVKzC1DRgn8Xayk6eNvWal5E+qjaO2537NgRmzdv1mQuVEc9KizB8WuZAIC+LVkkEemSRCzCnAF+GL8pFiJAbaE0va8vJ20ToQabSd64cQMzZ87EsGHDkJ5eeszE77//josXL2osOaobDl9OR5FcAR97CzRxbKDrdIjqvT4tXLByeJtyq0wlT+qiGxl5OsiKSP9Uq0g6duwYWrZsiejoaGzfvh2PHj0CAMTHx2POnDkaTZAMn3KorYVzpTckJSLt6tPCBSc+eRmbRrfDyCZybBrdDl8PbQ0AWHnsBpKy8nWcIZHuVatImjZtGj777DMcPHgQJiYmyusvv/wyTp8+rbHkyPAVFMtx5EppTyNXtRHpF4lYhI7etmhrL6Cjty36t3LBC43tUFSiwIJ9z960l6g+qFaRdP78eeU5aE9zdHREZmZmjZOiuuOPqxnIL5LDzcYMLd2sdZ0OET2DSCTC3AH+MBKLcDAhDUef/IFDVF9Vq0iysbFBSkpKuetxcXFwc3OrcVJUd0Q+GWrr7c+hNiJD0MTJEmEveAEo3Xm7sESu24SIdKhaRdLQoUPxySefIDU1FSKRCAqFAn/++Sc+/vhjjBw5UtM5koEqKlHg0KXSo0g41EZkON7v2QQOlqa4lZmHtSdu6zodIp2pVpH03//+F76+vnB3d8ejR4/g5+eHbt26oUuXLpg5c6amcyQDdfpmFnIKSmDfwBRtPRvqOh0iqiRLqTGm9/UFAEQcvoaU7Mc6zohIN6pcJAmCgNTUVHzzzTe4efMm9u7di02bNuHy5cvYuHEjJBKJNvIkA/T7k6G2YH8n7rlCZGAGtXZDO8+GyC+S47//u6zrdIh0osqbSQqCgMaNG+PixYto0qQJ3N3dtZEXGTi5QsDBBO6yTWSoRCIR5oX4Y0DECeyJv4dhHTzQWcazOal+qXJPklgsRpMmTZCVlaWNfKiOiEl6gMxHRbCSGvEfViID5e9qjbc6egIA5u6+iBK5QscZEdWuas1J+vzzzzFlyhRcuHBB0/lQHXEgoXTpcJCfE4wl1d7YnYh07KPgpmhobowrabnYeDpR1+kQ1apqfXqNHDkSZ86cQUBAAMzMzGBra6vyRfWbIPxTJPVt4aLjbIioJmzMTTC1T+kk7vADV5GRW6jjjIhqT7UOuF22bJmG06C6JCkPSMkugLmJBC82sdd1OkRUQ4PbuWNLdBLOJ2djSeRlfPFGgK5TIqoV1SqSQkNDNZ0H1QFyhYDoW/dx4E5pB2WPpg6QGnO1I5Ghk4hLJ3G/+u1J/BJzF2929EAbD27rQXVfjSeLFBQUICcnR+WL6p/ICynouvgwhq89iwsPS3+tTt7IQuSF8juzE5HhaePREG+0bQQAmPPbRcgVgo4zItK+ahVJeXl5mDhxIhwdHWFhYYGGDRuqfFH9EnkhBeM3xSIlu0DlevbjYozfFMtCiaiOmNrHF5ZSI5xPzsa2s3d0nQ6R1lWrSJo6dSoOHz6MlStXwtTUFN9//z3mzZsHV1dX/Pjjj5rOkfSYXCFg3p4EqPubsuzavD0J/KuTqA5wsDTF5F5NAQBLIi/jYX6RjjMi0q5qFUl79uzBt99+i9deew1GRkZ48cUXMXPmTPz3v//F5s2bNZ0j6bEzt+6X60F6moDSSdxnbt2vvaSISGtGdPJEMydLPMgvxtIDV3WdDpFWVatIun//Pnx8fAAAVlZWuH+/9AOwa9eu+OOPPzSXHem99NyKC6TqtCMi/WYkEWPuQH8AwOboRFxIztZxRkTaU60iycfHB7du3QIA+Pr6Ytu2bQBKe5hsbGw0lhzpP0dLqUbbEZH+6yyzw4AAVygEYM7uixAEDqfrm7LVxjGZIkTfus8pD9VUrSIpLCwM8fHxAIBp06ZhxYoVkEql+PDDDzFlyhSNJkj6rYO3LVyspajo+FoRABdrKTp4c5NRorpkRj9fmJtIEJP4ADvjknWdDj3l6dXGP16TYPjas+i6+DAX0VRDtYqkDz/8EO+//z4AICgoCJcvX8aWLVsQFxeHDz74QKMJkn6TiEWYM8BP7X1lhdOcAX6QiCsqo4jIELlYm+G9l5sAABb9fhm5BcU6zoiAilcbp2YXcLVxNWjkUC1PT0+8+uqraNWqlSbCkYHp08IF37wZWO66s7UUK4e3QR8eTUJUJ43u6gVvewtk5Bbim6hruk6n3uNqY82r1o7b8+fPf+b9s2fPrlYyZLhcbcwBAJZSCV5pVITe3Tqic2NH9iAR1WGmRhLMGeCHUev+wro/b2NwO3c0cbLUdVr1VlVWG3eW2dVeYgasWkXSzp07VW4XFxfj1q1bMDIygkwmY5FUD8Uklq5w7Ohli3YNU9DR25YFElE90KOZI3r5OeFgQhrm7rmITW93hEjE974ucLWx5lWrSIqLiyt3LScnB6NGjcKgQYNqnBQZnpjEBwCANp42QA7HvInqk9n/54djVzPw5/Us/H4hFf1acohdFyq7itjG3FjLmdQdGpmTBJTulzRv3jzMmjVLUyHJQAiCgJjEhwCANu42Os2FiGqfu605xneXAQA+25uAx0VyHWdUP3Xwtq1UATTt17/xy9k7nJtUCRorkgAgOzsb2dncWKy+uXP/MTIfFcJYIkILVytdp0NEOjC+hwyNGprhXnYBvj16Xdfp1EuxSQ/wqKBE7X1lA6ANzY2RklOIKb/+jf7fHMeRy+nc5+oZqjXc9s0336jcFgQBKSkp2LhxI/r27auRxMhwxCSVzkdq4WYNU2OJjrMhIl2QGksws78fxm2KwepjN/Fam0bwsrfQdVr1xvX0Rxjz41mUKAS0amSN9JxCpOb8M/fI2VqKOQP80KOZIzacvI0VR67jcmouwtb/hU4+tpjetzkCOBJQTrWKpK+++krltlgshoODA0JDQzF9+nSNJEaGo2w+UluPhjrOhIh0qbe/E15sYo/j1zKxYG8CfhjVXtcp1QvpuQUYte4MHuYXo7WHDba80wkmRmKcup6OA8ejEfyi6mrjsd1lGNLeHd8evYH1J2/j9M37CFnxJ/q3csHU3s3gacfitky1iqSyI0mIAODs7SdFkieLJKL6TCQSYe5Af/RZ9geiLqcj6lIaujXmbvvalFdYgtHr/8LdB4/hZWeO70e2g5lJaY9+R29bZF0S1K42tjE3wYx+zTGysyfCD17Fzrhk7Ps7BfsvpOKtjh54r2cT2Dcw1cVL0isanZNE9U9uQTGupOUCYJFERIDMoQFGd/UGAMzbcxHHr2Xy/DAtKZEr8O6WWFxIzoGdhQk2jO4AuyoWNo0amiN8cCD2vfciujd1QIlCwIZTiejxxVFERF1DfpH6OU71RbV6kgYNGlTpfTB27NhRnacgA3HuzkMIAuBuawZHKymKi3k0AVF9997LTfDzmSQk3X+M0T/GApDgx2tn4fJkXgx34a85QRAwc9cFHL2SAamxGD+Mal+jYTI/VytsGN0BJ69nYtHvl3E+ORtLD17FxtOJmBTUFIPbNYKR5J9+lacP0LW7db/Obh5crZ4ka2trREVF4ezZs8prMTExOHz4MKysrGBtba38orqN85GI6N9OXMtA9uPyPRA8P0xzIg5fx89/3YFYBES82QaBGpp03aWxPX579wV882ZruNuaIT23EDN2nkfvZX9g/8VUCIJQrw7QrVZPkpOTEwYPHoxVq1ZBIikd+5TL5ZgwYQKsrKzwxRdfaDRJ0l/KIolDbUSEf84PU0dA6VL0eXsS0MvPuU72PNSGX87eQfjBqwCA+SEt0MvPSaPxxWIRBga4oo+/MzZHJyLi8HXcyMjD2I0x8HGwwM2MvHKPKSuA69p5ndXqSVq7di0+/vhjZYEEABKJBJMnT8batWurHG/FihXw8vKCVCpFx44dcebMmQrbFhcXY/78+ZDJZJBKpQgICEBkZKRKG7lcjlmzZsHb2xtmZmaQyWRYsGBBhXtBjBs3DiKRCMuWLaty7vWZXCHgXNJDAEAbFklEhKqdH0ZV98fVDEzfcR5A6d5Uwzt5au25TIzECHvBG0en9MDElxrD1EiktkAC6u4ButUqkkpKSnD58uVy1y9fvgyFQlGlWFu3bsXkyZMxZ84cxMbGIiAgAL1790Z6erra9jNnzsTq1asRERGBhIQEjBs3DoMGDVI5KmXx4sVYuXIlli9fjkuXLmHx4sVYsmQJIiIiysXbuXMnTp8+DVdX1yrlTcDVtFzkFpbAwkSCZjzUkohQt84Pe3rejT5MPL94LxvjN8WgRCHglUBXTAluVivPayU1xse9m+GrIa2f2a4uFsDVGm4LCwvD22+/jRs3bqBDhw4AgOjoaHz++ecICwurUqzw8HCMGTNG+bhVq1Zh3759WLt2LaZNm1au/caNG/Hpp5+iX79+AIDx48fj0KFDWLp0KTZt2gQAOHnyJEJCQtC/f38AgJeXF3766adyPVTJycl47733sH//fmVbqryyobZADxuVCX1EVH9V9vwwR0v9Xl4eeSEF8/YkPOkV0/3E87sP8hG27i/kFcnRRWaHJa8HQFzLw5XF8sp1ghy7mo7WHjaQ1oHNhatVJH355ZdwdnbG0qVLkZJSOlHLxcUFU6ZMwUcffVTpOEVFRYiJiVHZgFIsFiMoKAinTp1S+5jCwkJIpapvQjMzM5w4cUJ5u0uXLlizZg2uXr2Kpk2bIj4+HidOnEB4eLiyjUKhwIgRIzBlyhT4+/tXOmf6R6xyPhL3QSGiUh28beFiLUVqdgGe1e+y7s9b8HO1hrWZ/h22GnkhBeM3xZbLX1fzbrLzizFq3V9Izy2Er7MlVo1oCxOj2v/DtLIF8KpjN7Huz9vo6GOH7k0d0KOZA3zsLSq9Kl6fVKtIEovFmDp1KqZOnYqcnBwApQfcVlVmZibkcjmcnFQnnTk5OakdzgOA3r17Izw8HN26dYNMJkNUVBR27NgBufyfAxWnTZuGnJwc+Pr6QiKRQC6XY+HChXjrrbeUbRYvXgwjIyO8//77lcq1sLAQhYWFyttlr7u4uFjjy97L4mljOb0mY59NLO1SDXSzLBdXW1sBGHJ8Q85d2/ENOXdDj6+N2J/2bYb3fo6HCFApNMpuS8TAgYR0JHz9B74eEoBWjaq/ElrT+csVAubuvqi2wPtn4vlF9GhiV+OJ55XJvbBEgXd+jMH19EdwsjLFmuGtYSap3OvV9PemdSNLOFuZIi2nsMIC2MxYAiupBGm5Rfjjagb+uJqBBXuBRjZSvNjEHt2a2KOTjy0amFZcfsgVAk7fyEBMpgjW19LRSeag0Un+Vfl+iIRqnGz3+PFjCIIAc3NzAEBiYiJ27twJPz8/BAcHVzrOvXv34ObmhpMnT6Jz587K61OnTsWxY8cQHR1d7jEZGRkYM2YM9uzZA5FIBJlMhqCgIKxduxaPHz8GAPz888+YMmUKvvjiC/j7++PcuXOYNGkSwsPDERoaipiYGPTv3x+xsbHKuUheXl6YNGkSJk2apDbXuXPnYt68eeWub9myRfl9qE9yioBZMUYQQcB/28thXq1ym4jqqvgsEXbcFuNh0T8fbjYmAl71UsDGVMCGqxJkFYogEQkY6KlAd2cB+tDRcC1bhOUJzx8mmugnRxNr7c5RUgjAj9fEiMsSQyoR8IG/HK46PjEkPkuEtVfLerGe/oGVfi9GN1Wgla2A1MfApYciXHoowo0cEeTCP23FIgE+lgKa25R+uZpD+bN/1u9NgJ1mvt/5+fkYNmwYsrOzn9vBU60iKTg4GK+++irGjRuHhw8folmzZjAxMUFmZibCw8Mxfvz4SsUpKiqCubk5fv31V7zyyivK66GhoXj48CF+++23Ch9bUFCArKwsuLq6Ytq0adi7dy8uXrwIAHB3d8e0adPw7rvvKtt/9tln2LRpEy5fvoxly5Zh8uTJEIuf2hhLLodYLIa7uztu375d7vnU9SS5u7sjMzOzWr1oz1JcXIyDBw+iV69eMDbWbFe0pmIfTEjHhJ/OoaljA+x7r4vG41fEkOMbcu7ajm/IuRt6fG3GLusROHwqBi93bqvSI5DzuBjTd13EgYTSRTq9mjti0SD/Kg+/aTr/jaeTMH+f+pGMp4W/0RIDWtVsyO15uX8eeQU//JkIY4kIP4xsg84+dhqNX137L6bhs/9dRmrOP5+JLtam+LSvL3r7l9+OIL+oBNG3HuD4tUwcu5aJpPuPVe53tDTFi03sYC01xtqTieUeX1YuRQwNUBu/qnJycmBvb1+pIqlaf//HxsYqD7n99ddf4ezsjLi4OGzfvh2zZ8+udJFkYmKCtm3bIioqSlkkKRQKREVFYeLEic98rFQqhZubG4qLi7F9+3YMHjxYeV9+fr5KAQSUblFQtvJuxIgRCAoKUrm/d+/eGDFiRIUTz01NTWFqWn6iobGxsVb+UdT32OeSS4cb23rZqo2jzdwNPb4h567t+Iacu6HH10ZsYwAvNHFE9jUBLzRxVIlvZ2yM1SPaYcPJ21j4v0s4eCkdl1JzsXxY9TZGrGn+WY8K8e3RG9hw8nal2kdeTEcrd1s0dmxQ7ecsoy739X/ewg9/lhYMS15vhW7NnDUavyb+L7AR+rZyq/AA3X+zNjZGcAszBLcoHbm5nZmHY1czcOxqBk7eyER6biG2x96r8PnKhjkX/n4FfVu51XjorSrfi2oVSfn5+bC0LF3yfeDAAbz66qsQi8Xo1KkTEhPLV4HPMnnyZISGhqJdu3bo0KEDli1bhry8PGWxMnLkSLi5uWHRokUASlfRJScnIzAwEMnJyZg7dy4UCgWmTp2qjDlgwAAsXLgQHh4e8Pf3R1xcHMLDwzF69GgAgJ2dHezsVCtyY2NjODs7o1mz2llSaei4iSQR1ZRIJMKoF7zRxrMh3t0Sizv3H+ONVScxvW9zhL3gVSsTfbMfF+P74zex9sQt5BWVzm01lohQLH/2IMuBhDQcSEhDt6YOCOvihe5NHTS22izyQirm7S3dkHNK72YY1LqRRuJqkkQseuYBus/iZW8BL3sLhHbxQkGxHGdvP8BPZxKx73xqhY95enuBzrKq9ajVRLWKpMaNG2PXrl0YNGgQ9u/fjw8//BAAkJ6eXuWhpyFDhiAjIwOzZ89GamoqAgMDERkZqZzMnZSUpNIrVFBQgJkzZ+LmzZto0KAB+vXrh40bN8LGxkbZJiIiArNmzcKECROQnp4OV1dXjB07FrNnz67Oy6V/KSyR4/zdbABAOxZJRFRDrRrZYO97L2La9r/x+4VUzN+bgNM3s/DF6wGwNtdOz1l+UQnW/Xkba/64iezHpRN5W7pZ46PgpnhcJMeEzbEAyk88B4APejbBxZQcHLqUppyc7G1vgdDOnnitbSNYSqufc0zifXzwcxwEAXirowcm9JBVO5YhkBpL0LWJPbLyCp9ZJJWp7f21qlUkzZ49G8OGDcOHH36Il19+WTnp+sCBA2jd+tmbTakzceLECofXjh49qnK7e/fuSEhQv+V9GUtLSyxbtqxKO2irm4dE6l1IzkGRXAE7CxN42tW/SetEpHnWZsb49q02+PFUIhbuu4QDCWm4+M1xrHhLc+eSAaV/5G2JTsKKIzeQ+ah0Tk0Txwb4KLgpevs7K3uvVg5v89Q+SaWc/7VPUlJWPn48dRtbz97Brcw8zN2TgC8PXMXrbRshtIsXvO2rNsv6ZsYjvLPhLApLFOjp64h5A/0Nctl8dVR+f63KtdOUahVJr7/+Orp27YqUlBQEBAQor/fs2RODBg3SWHKkn8r2R2rj2bDevIGJSPtEIhFCu3ihjUfp8FvS/Xy8seokpvVtjtE1HH4rkSvwa8xdfBN1DfeeFD4etuaYFNQEIYHl57n0aeGCXn7Oz5x342Fnjpn/54cPezXFjrhkrP/zFm5k5GH9ydvYcOo2XmrmiFFdvPBiE/tyuT+9m7fdrfto7GSN0HVn8CC/GAGNrBExrHW92qT3eftriVBapHbwrt19+aq9cNvZ2RnOzs746aefMHDgQFhYWCh336a6jfORiEibWjayxt73u2La9r/xv/OpWPBk+O3Lagy/KRQC9vx9D18dvIrbWfkAACcrU7zfswkGt3OH8TMKkcrOu7EwNcKITp4Y3tEDJ65nYv2ft3H4SjoOXy79kjlYYFQXL7zaphEsTI3U7uZdNg/Kw9YcP4xqD3OT+rWvikQswpwBfhi/KVbt/loAMGeAX60filzjn8LYsWPRsWNH+Pj4aCIf0nOCIOAsiyQi0jIrqTFWDGuDjacT8dneSziYkIZ+3xzH8mGt0dqj9N+ef/fGPN3TIwgCDl1Kx9IDV3A5NRcAYGthgglPDoXVxpEZIpEILzZxwItNHHA7Mw8bTt3GL2fv4kZGHmb9dhFL9l9BBy9bRF0ufzZp2UTxt7t6w76Bfh/Zoi19WrhUapizNtW4SKrGNktkwO7cf4zMR4UwlojQ0q36u+QSET2PSCTCyM7/DL8lZuXjjVWnMK2vL9xszDB/b/mz1Wb/nx8spcb44sAVxN95CACwlBrhPy/6IKyr9zN3etYkL3sLzBngj4+Cm2F7zF2sP3kbtzLz1BZIT1t17AaGd/Ks9R4TfVGZYc7apPHflsePH8PMzEzTYUlPxCSVHkXSws26ThxeSET6r4WbNfa81xXTt5/HvvMp+GzfJbXtUrILMP7JqjSg9IiMUS94YWw3H9iYm9RWuioamBohtIsXRnTyxOo/bmBx5JVnttfFMnd9U5PtBTStxrPCfv/9d7i5uaGwsBBLly6Ft7e3JvIiPaWcj+TBoTYiqj1WUmMsH9Ya8wb6Var9yM6eODa1Bz7p46uzAulpYrEIrjaV60Co7WXuVLEqFUmFhYWYPn062rVrhy5dumDXrl3o2rUrtmzZAm9vbyxbtky5ZxLVTTGJDwFwPhIR1T6RSISmTpXbi69vC5daXy7+PPq6zJ0qVqXhttmzZ2P16tUICgrCyZMn8cYbbyAsLAynT59GeHg43njjDUgkHIKpq3ILinEltfQ4kjYskohIByrby6KPvTH6usydKlalnqRffvkFP/74I3799VccOHAAcrkcJSUliI+Px9ChQ1kg1XHxd7KhEIBGDc3gZMW/dIio9hlyb0zZMnfgn2XtZXS5zJ0qVqUi6e7du2jbti0AoEWLFjA1NcWHH37IDQXribOJpZO2OdRGRLpS1htT0aeOCICLHvfGlC1zd7ZWLeKcraVYObyNTpa5U8WqNNwml8thYvLPBDgjIyM0aFDzE5DJMJRN2uZ5bUSkK/q66WBV6Nsyd6pYlYokQRAwatQomJqWbnRVUFCAcePGwcJC9XyaHTt2aC5D0gtyhYBzSQ8BcD4SEemWPm46WFX6tMydKlalIik0NFTl9vDhwzWaDOmva+m5yC0sgYWJBM2cLHWdDhHVc+yNodpQpSJp3bp12sqD9FzZUFugh029OnSRiPQXe2NI2/hpR5XCTSSJiKi+YZFElVJWJHE+EhER1Rcskui5MnILkZiVD5EIytO3iYiI6joWSfRcsUmlvUhNHS1hbWas42yIiIhqB4skeq5YDrUREVE9xCKJnks5aZtFEhER1SMskuiZCkvk+Ds5GwCLJCIiql9YJNEzXUjOQVGJAnYWJvCyM9d1OkRERLWGRRI909PzkXiQMRER1ScskuiZOB+JiIjqKxZJVCFBEBCTxCKJiIjqJxZJVKG7Dx4jI7cQxhIRWrpZ6zodIiKiWsUiiSpUNtTm72oNqbFEx9kQERHVLhZJVKGzifcBcKiNiIjqJxZJVKGYxIcAWCQREVH9xCKJ1MotKMaV1BwALJKIiKh+YpFEasXfyYZCABo1NIOTlVTX6RAREdU6FkmkFvdHIiKi+o5FEqnF/ZGIiKi+Y5FE5cgVAuLKjiPxYJFERET1E4skKudaei5yC0tgbiKBr7OlrtMhIiLSCRZJVE7ZfKTWHjYwkvBXhIiI6id+AlI5yknbHGojIqJ6jEUSlRNbNh+Jk7aJiKgeY5FEKjIfFeJ2Vj4AoDV7koiIqB5jkUQqyobamjo1gLWZsY6zISIi0h0WSaQilptIEhERAWCRRP/yz07btjrOhIiISLf0okhasWIFvLy8IJVK0bFjR5w5c6bCtsXFxZg/fz5kMhmkUikCAgIQGRmp0kYul2PWrFnw9vaGmZkZZDIZFixYAEEQlG3mzp0LX19fWFhYoGHDhggKCkJ0dLTWXqMhKCyR4+/kbADsSSIiItJ5kbR161ZMnjwZc+bMQWxsLAICAtC7d2+kp6erbT9z5kysXr0aERERSEhIwLhx4zBo0CDExcUp2yxevBgrV67E8uXLcenSJSxevBhLlixBRESEsk3Tpk2xfPlynD9/HidOnICXlxeCg4ORkZGh9desry7ey0FRiQK2FibwsjPXdTpEREQ6pfMiKTw8HGPGjEFYWBj8/PywatUqmJubY+3atWrbb9y4ETNmzEC/fv3g4+OD8ePHo1+/fli6dKmyzcmTJxESEoL+/fvDy8sLr7/+OoKDg1V6qIYNG4agoCD4+PjA398f4eHhyMnJwd9//63116yvYp86ikQkEuk4GyIiIt0y0uWTFxUVISYmBtOnT1deE4vFCAoKwqlTp9Q+prCwEFKpVOWamZkZTpw4obzdpUsXrFmzBlevXkXTpk0RHx+PEydOIDw8vMI81qxZA2trawQEBFT4vIWFhcrbOTk5AEqH/4qLiyv3giupLJ6m4z4v9plbWQCAwEZW1X5ubeZu6PENOXdtxzfk3A09viHnbujxDTl3bcevjdiVIRKenqhTy+7duwc3NzecPHkSnTt3Vl6fOnUqjh07pnaO0LBhwxAfH49du3ZBJpMhKioKISEhkMvlyiJGoVBgxowZWLJkCSQSCeRyORYuXKhSjAHA3r17MXToUOTn58PFxQW7du1C+/bt1eY6d+5czJs3r9z1LVu2wNzc8IemBAGYHSNBTrEI7/uXQGal64yIiIg0Lz8/H8OGDUN2djasrJ79YafTnqTq+PrrrzFmzBj4+vpCJBJBJpMhLCxMZXhu27Zt2Lx5M7Zs2QJ/f3+cO3cOkyZNgqurK0JDQ5XtXnrpJZw7dw6ZmZn47rvvMHjwYERHR8PR0bHc806fPh2TJ09W3s7JyYG7uzuCg4Of+02uquLiYhw8eBC9evWCsbFm9yqqKPadB/nIOX0CxhIRxrzWG1JjiUbja4ohxzfk3LUd35BzN/T4hpy7occ35Ny1HV+bsctGgipDp0WSvb09JBIJ0tLSVK6npaXB2dlZ7WMcHBywa9cuFBQUICsrC66urpg2bRp8fHyUbaZMmYJp06Zh6NChAICWLVsiMTERixYtUimSLCws0LhxYzRu3BidOnVCkyZN8MMPP5TrcQIAU1NTmJqalrtubGyslV++2o79d/IjAIC/qzUszaUVPaza8TXNkOMbcu7ajm/IuRt6fEPO3dDjG3Lu2o6vjdhViafTidsmJiZo27YtoqKilNcUCgWioqJUht/UkUqlcHNzQ0lJCbZv346QkBDlffn5+RCLVV+aRCKBQqF4ZkyFQqEy76g+ieEmkkRERCp0Ptw2efJkhIaGol27dujQoQOWLVuGvLw8hIWFAQBGjhwJNzc3LFq0CAAQHR2N5ORkBAYGIjk5GXPnzoVCocDUqVOVMQcMGICFCxfCw8MD/v7+iIuLQ3h4OEaPHg0AyMvLw8KFCzFw4EC4uLggMzMTK1asQHJyMt54443a/yboARZJREREqnReJA0ZMgQZGRmYPXs2UlNTERgYiMjISDg5OQEAkpKSVHqFCgoKMHPmTNy8eRMNGjRAv379sHHjRtjY2CjbREREYNasWZgwYQLS09Ph6uqKsWPHYvbs2QBKe5UuX76MDRs2IDMzE3Z2dmjfvj2OHz8Of3//Wn39+uBRYQkup5aO0bJIIiIiKqXzIgkAJk6ciIkTJ6q97+jRoyq3u3fvjoSEhGfGs7S0xLJly7Bs2TK190ulUuzYsaM6qdZJ55IeQiEAbjZmcLKq+XwkIiKiukDnm0mS7pUNtbXzYi8SERFRGRZJhJgkzkciIiL6NxZJ9ZxCISDuqeNIiIiIqBSLpHruWvoj5BaWwNxEAl9nS12nQ0REpDdYJNVzZxPvAwAC3W1gJOGvAxERURl+KtZz3B+JiIhIPRZJ9VwsiyQiIiK1WCTVY5mPCnE7Kx8A0JqTtomIiFSwSKrHynqRmjo1gLWZ9g4/JCIiMkQskuox7o9ERERUMRZJ9VjMbe6PREREVBEWSfVUYYkCfydnA2BPEhERkToskuqphJQcFJUoYGthAm97C12nQ0REpHdYJNVTcUkPAZQOtYlEIt0mQ0REpIdYJNVTsU+KJA61ERERqcciqR4SBBZJREREz8MiqR66XwhkPCqCkViEVo2sdZ0OERGRXmKRVA/dyi2dg+TvZg2psUTH2RAREeknFkn1UFmR1Jb7IxEREVWIRVI9IlcIiL51HxcflBZJbTxsdJsQERGRHjPSdQJUOyIvpGDengSkZBcAKC2S5u9NgJFEhD4tXHSbHBERkR5iT1I9EHkhBeM3xT4pkP6RkVuI8ZtiEXkhRUeZERER6S8WSXWcXCFg3p4ECGruK7s2b08C5Ap1LYiIiOovFkl13Jlb98v1ID1NAJCSXYAzt+7XXlJEREQGgEVSHZeeW3GBVJ12RERE9QWLpDrO0VKq0XZERET1BYukOq6Dty1crKWo6AhbEQAXayk6eNvWZlpERER6j0VSHScRizBngJ/aidtlhdOcAX6QiCsqo4iIiOonFkn1QJ8WLngl0LXcdWdrKVYOb8N9koiIiNTgZpL1xOXUXADA6Bc8UZJ+E8EvdkTnxo7sQSIiIqoAe5LqgWtpubicmgtjiQjju/mgrb2Ajt62LJCIiIiegUVSPbA7/h4AoFsTB9iYG+s4GyIiIsPAIqmOEwRBWSQNVDMviYiIiNRjkVTH/X03G4lZ+ZAaixHU3EnX6RARERkMFkl1XFkvUlBzJ1iYcp4+ERFRZbFIqsPkCgF7/34y1BbAoTYiIqKqYJFUh525dR9pOYWwkhqhezMHXadDRERkUFgk1WFlQ219WjjD1Eii42yIiIgMC4ukOqqoRIHfL6QAAAYGuOk4GyIiIsPDIqmOOnE9Aw/zi2HfwBSdZXa6ToeIiMjgsEiqo3afKx1q+79WLtxZm4iIqBpYJNVBj4vkOJCQBoAbSBIREVWXXhRJK1asgJeXF6RSKTp27IgzZ85U2La4uBjz58+HTCaDVCpFQEAAIiMjVdrI5XLMmjUL3t7eMDMzg0wmw4IFCyAIgjLGJ598gpYtW8LCwgKurq4YOXIk7t27p9XXWVsOXUpDfpEc7rZmaO1uo+t0iIiIDJLOi6StW7di8uTJmDNnDmJjYxEQEIDevXsjPT1dbfuZM2di9erViIiIQEJCAsaNG4dBgwYhLi5O2Wbx4sVYuXIlli9fjkuXLmHx4sVYsmQJIiIiAAD5+fmIjY3FrFmzEBsbix07duDKlSsYOHBgrbxmbStb1TaglStEIg61ERERVYfOt2AODw/HmDFjEBYWBgBYtWoV9u3bh7Vr12LatGnl2m/cuBGffvop+vXrBwAYP348Dh06hKVLl2LTpk0AgJMnTyIkJAT9+/cHAHh5eeGnn35S9lBZW1vj4MGDKnGXL1+ODh06ICkpCR4eHlp7vdqW/bgYx65kAOBQGxERUU3otEgqKipCTEwMpk+frrwmFosRFBSEU6dOqX1MYWEhpFKpyjUzMzOcOHFCebtLly5Ys2YNrl69iqZNmyI+Ph4nTpxAeHh4hblkZ2dDJBLBxsamwuctLCxU3s7JyQFQOnRXXFz83NdaFWXxqhN3X3wyiuQKNHG0gMzOrFyMmsSuDMbXTWxDj2/IuRt6fEPO3dDjG3Lu2o5fG7ErQySUTdTRgXv37sHNzQ0nT55E586dldenTp2KY8eOITo6utxjhg0bhvj4eOzatQsymQxRUVEICQmBXC5XFjEKhQIzZszAkiVLIJFIIJfLsXDhQpVi7GkFBQV44YUX4Ovri82bN6ttM3fuXMybN6/c9S1btsDc3Lw6L18rViSIcTVbjP7ucgQ30tmPloiISC/l5+dj2LBhyM7OhpWV1TPb6ny4raq+/vprjBkzBr6+vhCJRJDJZAgLC8PatWuVbbZt24bNmzdjy5Yt8Pf3x7lz5zBp0iS4uroiNDRUJV5xcTEGDx4MQRCwcuXKCp93+vTpmDx5svJ2Tk4O3N3dERwc/NxvclUVFxfj4MGD6NWrF4yNjSv9uIzcQlw/fQwA8OHr3eFpW754q27symJ83cQ29PiGnLuhxzfk3A09viHnru342oxdNhJUGTotkuzt7SGRSJCWlqZyPS0tDc7Ozmof4+DggF27dqGgoABZWVlwdXXFtGnT4OPjo2wzZcoUTJs2DUOHDgUAtGzZEomJiVi0aJFKkVRWICUmJuLw4cPPLHZMTU1hampa7rqxsbFWfvmqE/vApbtQCECAuw0aO1lrNHZVMb5uYht6fEPO3dDjG3Luhh7fkHPXdnxtxK5KPJ2ubjMxMUHbtm0RFRWlvKZQKBAVFaUy/KaOVCqFm5sbSkpKsH37doSEhCjvy8/Ph1is+tIkEgkUCoXydlmBdO3aNRw6dAh2doa/K3XZqraBAZywTUREVFM6H26bPHkyQkND0a5dO3To0AHLli1DXl6ecrXbyJEj4ebmhkWLFgEAoqOjkZycjMDAQCQnJ2Pu3LlQKBSYOnWqMuaAAQOwcOFCeHh4wN/fH3FxcQgPD8fo0aMBlBZIr7/+OmJjY7F3717I5XKkpqYCAGxtbWFiYlLL34Wau3M/H7FJDyESle6yTURERDWj8yJpyJAhyMjIwOzZs5GamorAwEBERkbCyckJAJCUlKTSK1RQUICZM2fi5s2baNCgAfr164eNGzeqrEqLiIjArFmzMGHCBKSnp8PV1RVjx47F7NmzAQDJycnYvXs3ACAwMFAlnyNHjqBHjx5afc3asOfv0l6kTt52cLKSPqc1ERERPY/OiyQAmDhxIiZOnKj2vqNHj6rc7t69OxISEp4Zz9LSEsuWLcOyZcvU3u/l5QUdLurTirKz2rg3EhERkWbofMdtqrmrabm4nJoLY4kIfVuon/BOREREVcMiqQ4o60Xq3tQBNuaGN5+KiIhIH7FIMnCCIPxzVhtXtREREWkMiyQDF383G0n382FmLEEvPyddp0NERFRnsEgycGVDbUF+TjA30Yt5+ERERHUCiyQDJlcI2Ps3N5AkIiLSBhZJBiz6VhbScwthJTVCt6b2uk6HiIioTmGRZMD2PJmw3beFC0yNJDrOhoiIqG5hkWSgikoU+N/50qNUuIEkERGR5rFIMlDHr2Ug+3ExHCxN0cnH8A/nJSIi0jcskgxU2d5I/Vu6QCIW6TgbIiKiuodFkgF6XCTHwYQ0ABxqIyIi0hYWSQbo0KU05BfJ4W5rhtbuNrpOh4iIqE5ikWSAlMeQtHKFSMShNiIiIm1gkWRgsvOLcfRKOgAOtREREWkTiyQDE3kxBcVyAc2cLOHrbKXrdIiIiOosFkkGpmyojb1IRERE2sUiyYCk5xbg1I0sAKXzkYiIiEh7WCQZkH1/p0AhAIHuNvCwM9d1OkRERHUaiyQDohxqC2AvEhERkbaxSDIQd+7nIy7pIcQi4P9aueg6HSIiojqPRZKBKOtF6uRjB0crqY6zISIiqvtYJBmIPRxqIyIiqlUskgzA1bRcXE7NhbFEhL4tONRGRERUG1gkGYDd50p7kbo3dYC1ubGOsyEiIqofWCTpOUEQ/jmrjUNtREREtYZFkp6Lv5uNpPv5MDOWoJefk67TISIiqjdYJOm5sqG2ID8nmJsY6TgbIiKi+oNFkh6TKwTs+Zur2oiIiHSBRZIeO3P7PjJyC2FtZozuTR10nQ4REVG9wiJJj+39OxUA0LeFM0yM+KMiIiKqTfzk1VMlCmB/QhoADrURERHpAoskPXX5oQjZj0vgaGmKjj52uk6HiIio3mGRpKdiMkUAgP6tXCARi3ScDRERUf3DIknPyBUCjl3NQPz9J0VSSx5DQkREpAsskvRI5IUUdF18GO9sjINcKC2SJv4Uh8gLKTrOjIiIqP5hkaQnIi+kYPymWKRkF6hcT8suwPhNsSyUiIiIahmLJD0gVwiYtycBgpr7yq7N25MAuUJdCyIiItIGFkl64Myt++V6kJ4mAEjJLsCZW/drLykiIqJ6jkWSHkjPrbhAqk47IiIiqjkWSXrA0VKq0XZERERUcyyS9EAHb1u4WEtR0W5IIgAu1lJ08LatzbSIiIjqNZ0XSStWrICXlxekUik6duyIM2fOVNi2uLgY8+fPh0wmg1QqRUBAACIjI1XayOVyzJo1C97e3jAzM4NMJsOCBQsgCP9Met6xYweCg4NhZ2cHkUiEc+fOaevlVYpELMKcAX4AUK5QKrs9Z4AfN5UkIiKqRTotkrZu3YrJkydjzpw5iI2NRUBAAHr37o309HS17WfOnInVq1cjIiICCQkJGDduHAYNGoS4uDhlm8WLF2PlypVYvnw5Ll26hMWLF2PJkiWIiIhQtsnLy0PXrl2xePFirb/GyurTwgUrh7eBs7XqkJqztRQrh7dBnxbcVJKIiKg2GenyycPDwzFmzBiEhYUBAFatWoV9+/Zh7dq1mDZtWrn2GzduxKeffop+/foBAMaPH49Dhw5h6dKl2LRpEwDg5MmTCAkJQf/+/QEAXl5e+Omnn1R6qEaMGAEAuH37tjZfXpX1aeGCXn7OOHU9HQeORyP4xY7o3NiRPUhEREQ6oLMiqaioCDExMZg+fbrymlgsRlBQEE6dOqX2MYWFhZBKVXtazMzMcOLECeXtLl26YM2aNbh69SqaNm2K+Ph4nDhxAuHh4TXKt7CwEIWFhcrbOTk5AEqHAIuLi2sU+9/aNLJElr2ANo0soZCXQCHXXOyyXDWdM+PrNrahxzfk3A09viHnbujxDTl3bcevjdiVIRKenqxTi+7duwc3NzecPHkSnTt3Vl6fOnUqjh07hujo6HKPGTZsGOLj47Fr1y7IZDJERUUhJCQEcrlcWcAoFArMmDEDS5YsgUQigVwux8KFC1WKsTK3b9+Gt7c34uLiEBgY+Mx8586di3nz5pW7vmXLFpibm1fx1RMREZEu5OfnY9iwYcjOzoaVldUz2+p0uK2qvv76a4wZMwa+vr4QiUSQyWQICwvD2rVrlW22bduGzZs3Y8uWLfD398e5c+cwadIkuLq6IjQ0tNrPPX36dEyePFl5OycnB+7u7ggODn7uN7mqiouLcfDgQfTq1QvGxsYGE5vxdRfb0OMbcu6GHt+Qczf0+Iacu7bjazN22UhQZeisSLK3t4dEIkFaWprK9bS0NDg7O6t9jIODA3bt2oWCggJkZWXB1dUV06ZNg4+Pj7LNlClTMG3aNAwdOhQA0LJlSyQmJmLRokU1KpJMTU1hampa7rqxsbFWfvkMOTbj6y62occ35NwNPb4h527o8Q05d23H10bsqsTT2eo2ExMTtG3bFlFRUcprCoUCUVFRKsNv6kilUri5uaGkpATbt29HSEiI8r78/HyIxaovSyKRQKFQaPYFEBERUZ2m0+G2yZMnIzQ0FO3atUOHDh2wbNky5OXlKVe7jRw5Em5ubli0aBEAIDo6GsnJyQgMDERycjLmzp0LhUKBqVOnKmMOGDAACxcuhIeHB/z9/REXF4fw8HCMHj1a2eb+/ftISkrCvXv3AABXrlwBADg7O1fYi0VERET1i06LpCFDhiAjIwOzZ89GamoqAgMDERkZCScnJwBAUlKSSq9QQUEBZs6ciZs3b6JBgwbo168fNm7cCBsbG2WbiIgIzJo1CxMmTEB6ejpcXV0xduxYzJ49W9lm9+7dykIMgHJobs6cOZg7d652XzQREREZBJ1P3J44cSImTpyo9r6jR4+q3O7evTsSEhKeGc/S0hLLli3DsmXLKmwzatQojBo1qoqZEhERUX2i82NJiIiIiPQRiyQiIiIiNXQ+3GaoyvbgrMp+C5VVXFyM/Px85OTkaGXvCW3FZnzdxTb0+Iacu6HHN+TcDT2+Ieeu7fjajF32uV2ZvbRZJFVTbm4uAMDd3V3HmRAREVFV5ebmwtra+pltdHYsiaFTKBS4d+8eLC0tIRJp9gDast2879y5o/HdvLUZm/F1F9vQ4xty7oYe35BzN/T4hpy7tuNrM7YgCMjNzYWrq2u5fRX/jT1J1SQWi9GoUSOtPoeVlZVWfrG1HZvxdRfb0OMbcu6GHt+Qczf0+Iacu7bjayv283qQynDiNhEREZEaLJKIiIiI1GCRpIdMTU0xZ84ctQfq6nNsxtddbEOPb8i5G3p8Q87d0OMbcu7ajq/t3CuLE7eJiIiI1GBPEhEREZEaLJKIiIiI1GCRRERERKQGiyQiIiIiNVgk6ZE//vgDAwYMgKurK0QiEXbt2qWx2IsWLUL79u1haWkJR0dHvPLKK7hy5YrG4q9cuRKtWrVSbvzVuXNn/P777xqL/7TPP/8cIpEIkyZN0ki8uXPnQiQSqXz5+vpqJHaZ5ORkDB8+HHZ2djAzM0PLli1x9uxZjcT28vIql79IJMK7775b49hyuRyzZs2Ct7c3zMzMIJPJsGDBgkqdeVRZubm5mDRpEjw9PWFmZoYuXbrgr7/+qlas572HBEHA7Nmz4eLiAjMzMwQFBeHatWsai79jxw4EBwfDzs4OIpEI586d00js4uJifPLJJ2jZsiUsLCzg6uqKkSNH4t69exrLfe7cufD19YWFhQUaNmyIoKAgREdHayz+08aNGweRSIRly5ZpLP6oUaPKvQf69OmjsdwvXbqEgQMHwtraGhYWFmjfvj2SkpI0El/d+1ckEuGLL77QSPxHjx5h4sSJaNSoEczMzODn54dVq1ZpJHZaWhpGjRoFV1dXmJubo0+fPlV6T1Xms6mgoADvvvsu7Ozs0KBBA7z22mtIS0ur9HPUBIskPZKXl4eAgACsWLFC47GPHTuGd999F6dPn8bBgwdRXFyM4OBg5OXlaSR+o0aN8PnnnyMmJgZnz57Fyy+/jJCQEFy8eFEj8cv89ddfWL16NVq1aqXRuP7+/khJSVF+nThxQmOxHzx4gBdeeAHGxsb4/fffkZCQgKVLl6Jhw4Yaif/XX3+p5H7w4EEAwBtvvFHj2IsXL8bKlSuxfPlyXLp0CYsXL8aSJUsQERFR49hl3nnnHRw8eBAbN27E+fPnERwcjKCgICQnJ1c51vPeQ0uWLME333yDVatWITo6GhYWFujduzcKCgo0Ej8vLw9du3bF4sWLNZp7fn4+YmNjMWvWLMTGxmLHjh24cuUKBg4cqJH4ANC0aVMsX74c58+fx4kTJ+Dl5YXg4GBkZGRoJH6ZnTt34vTp03B1da107pWN36dPH5X3wk8//aSR2Ddu3EDXrl3h6+uLo0eP4u+//8asWbMglUo1Ev/pnFNSUrB27VqIRCK89tprGok/efJkREZGYtOmTbh06RImTZqEiRMnYvfu3TWKLQgCXnnlFdy8eRO//fYb4uLi4OnpiaCgoEp/tlTms+nDDz/Enj178Msvv+DYsWO4d+8eXn311UrFrzGB9BIAYefOnVqLn56eLgAQjh07prXnaNiwofD9999rLF5ubq7QpEkT4eDBg0L37t2FDz74QCNx58yZIwQEBGgkljqffPKJ0LVrV63F/7cPPvhAkMlkgkKhqHGs/v37C6NHj1a59uqrrwpvvfVWjWMLgiDk5+cLEolE2Lt3r8r1Nm3aCJ9++mmNYv/7PaRQKARnZ2fhiy++UF57+PChYGpqKvz00081jv+0W7duCQCEuLi4Ksd9XuwyZ86cEQAIiYmJWomfnZ0tABAOHTqksfh3794V3NzchAsXLgienp7CV199VeXYFcUPDQ0VQkJCqhXvebGHDBkiDB8+vMaxK4r/byEhIcLLL7+ssfj+/v7C/PnzVa5V5z3279hXrlwRAAgXLlxQXpPL5YKDg4Pw3XffVTl3QSj/2fTw4UPB2NhY+OWXX5RtLl26JAAQTp06Va3nqAr2JNVT2dnZAABbW1uNx5bL5fj555+Rl5eHzp07ayzuu+++i/79+yMoKEhjMctcu3YNrq6u8PHxwVtvvVXpbvTK2L17N9q1a4c33ngDjo6OaN26Nb777juNxX9aUVERNm3ahNGjR2vk4OUuXbogKioKV69eBQDEx8fjxIkT6Nu3b41jA0BJSQnkcnm5v8jNzMw02psHALdu3UJqaqrK74+1tTU6duyIU6dOafS5akN2djZEIhFsbGw0HruoqAhr1qyBtbU1AgICNBJToVBgxIgRmDJlCvz9/TUS89+OHj0KR0dHNGvWDOPHj0dWVlaNYyoUCuzbtw9NmzZF79694ejoiI4dO2p0OsTT0tLSsG/fPrz99tsai9mlSxfs3r0bycnJEAQBR44cwdWrVxEcHFyjuIWFhQCg8v4Vi8UwNTWt9vv3359NMTExKC4uVnnf+vr6wsPDo1betyyS6iGFQoFJkybhhRdeQIsWLTQW9/z582jQoAFMTU0xbtw47Ny5E35+fhqJ/fPPPyM2NhaLFi3SSLyndezYEevXr0dkZCRWrlyJW7du4cUXX0Rubq5G4t+8eRMrV65EkyZNsH//fowfPx7vv/8+NmzYoJH4T9u1axcePnyIUaNGaSTetGnTMHToUPj6+sLY2BitW7fGpEmT8NZbb2kkvqWlJTp37owFCxbg3r17kMvl2LRpE06dOoWUlBSNPEeZ1NRUAICTk5PKdScnJ+V9hqKgoACffPIJ3nzzTY0e/rl37140aNAAUqkUX331FQ4ePAh7e3uNxF68eDGMjIzw/vvvayTev/Xp0wc//vgjoqKisHjxYhw7dgx9+/aFXC6vUdz09HQ8evQIn3/+Ofr06YMDBw5g0KBBePXVV3Hs2DENZf+PDRs2wNLSUqPDSREREfDz80OjRo1gYmKCPn36YMWKFejWrVuN4pYVK9OnT8eDBw9QVFSExYsX4+7du9V6/6r7bEpNTYWJiUm5PwZq631rpPVnIL3z7rvv4sKFCxr/S71Zs2Y4d+4csrOz8euvvyI0NBTHjh2rcaF0584dfPDBBzh48GCl5wBUxdO9Iq1atULHjh3h6emJbdu2aeSvOYVCgXbt2uG///0vAKB169a4cOECVq1ahdDQ0BrHf9oPP/yAvn37Vnm+R0W2bduGzZs3Y8uWLfD398e5c+cwadIkuLq6aiz3jRs3YvTo0XBzc4NEIkGbNm3w5ptvIiYmRiPx65ri4mIMHjwYgiBg5cqVGo390ksv4dy5c8jMzMR3332HwYMHIzo6Go6OjjWKGxMTg6+//hqxsbEa6eFUZ+jQocr/b9myJVq1agWZTIajR4+iZ8+e1Y6rUCgAACEhIfjwww8BAIGBgTh58iRWrVqF7t271yzxf1m7di3eeustjf5bFxERgdOnT2P37t3w9PTEH3/8gXfffReurq416pk3NjbGjh078Pbbb8PW1hYSiQRBQUHo27dvtRZ3aOuzqSbYk1TPTJw4EXv37sWRI0fQqFEjjcY2MTFB48aN0bZtWyxatAgBAQH4+uuvaxw3JiYG6enpaNOmDYyMjGBkZIRjx47hm2++gZGRUY3/Uvw3GxsbNG3aFNevX9dIPBcXl3KFYvPmzTU6pAcAiYmJOHToEN555x2NxZwyZYqyN6lly5YYMWIEPvzwQ4326MlkMhw7dgyPHj3CnTt3cObMGRQXF8PHx0djzwEAzs7OAFBuVUxaWpryPn1XViAlJibi4MGDGu1FAgALCws0btwYnTp1wg8//AAjIyP88MMPNY57/PhxpKenw8PDQ/keTkxMxEcffQQvL6+aJ66Gj48P7O3ta/w+tre3h5GRUa28h48fP44rV65o9D38+PFjzJgxA+Hh4RgwYABatWqFiRMnYsiQIfjyyy9rHL9t27Y4d+4cHj58iJSUFERGRiIrK6vK79+KPpucnZ1RVFSEhw8fqrSvrfcti6R6QhAETJw4ETt37sThw4fh7e2t9edUKBTKMeua6NmzJ86fP49z584pv9q1a4e33noL586dg0Qi0UC2/3j06BFu3LgBFxcXjcR74YUXyi1pvXr1Kjw9PTUSv8y6devg6OiI/v37ayxmfn4+xGLVfyYkEonyr2tNsrCwgIuLCx48eID9+/cjJCREo/G9vb3h7OyMqKgo5bWcnBxER0drdO6ctpQVSNeuXcOhQ4dgZ2en9efU1Ht4xIgR+Pvvv1Xew66urpgyZQr279+vgUzLu3v3LrKysmr8PjYxMUH79u1r5T38ww8/oG3bthqbBwaU/t4UFxdr/X1sbW0NBwcHXLt2DWfPnq30+/d5n01t27aFsbGxyvv2ypUrSEpKqpX3LYfb9MijR49U/uq5desWzp07B1tbW3h4eNQo9rvvvostW7bgt99+g6WlpXIs19raGmZmZjWKDQDTp09H37594eHhgdzcXGzZsgVHjx7VyD+AlpaW5eZOWVhYwM7OTiNzqj7++GMMGDAAnp6euHfvHubMmQOJRII333yzxrGB0uWrXbp0wX//+18MHjwYZ86cwZo1a7BmzRqNxAdKP8zWrVuH0NBQGBlp7m09YMAALFy4EB4eHvD390dcXBzCw8MxevRojT3H/v37IQgCmjVrhuvXr2PKlCnw9fVFWFhYlWM97z00adIkfPbZZ2jSpAm8vb0xa9YsuLq64pVXXtFI/Pv37yMpKUm5f1HZB6uzs/Nz/+p9VmwXFxe8/vrriI2Nxd69eyGXy5XvYVtbW5iYmNQodzs7OyxcuBADBw6Ei4sLMjMzsWLFCiQnJ1d6K4nnfW/+XdQZGxvD2dkZzZo1q3F8W1tbzJs3D6+99hqcnZ1x48YNTJ06FY0bN0bv3r1rnPuUKVMwZMgQdOvWDS+99BIiIyOxZ88eHD16tMa5l/3bnpOTg19++QVLly6tVMyqxO/evTumTJkCMzMzeHp64tixY/jxxx8RHh5e49i//PILHBwc4OHhgfPnz+ODDz7AK6+8UulJ4c/7bLK2tsbbb7+NyZMnw9bWFlZWVnjvvffQuXNndOrUqYrfqWrQ+vo5qrQjR44IAMp9hYaG1ji2urgAhHXr1tU4tiAIwujRowVPT0/BxMREcHBwEHr27CkcOHBAI7HV0eQWAEOGDBFcXFwEExMTwc3NTRgyZIhw/fp1jcQus2fPHqFFixaCqamp4OvrK6xZs0aj8ffv3y8AEK5cuaLRuDk5OcIHH3wgeHh4CFKpVPDx8RE+/fRTobCwUGPPsXXrVsHHx0cwMTERnJ2dhXfffVd4+PBhtWI97z2kUCiEWbNmCU5OToKpqanQs2fPKn3Pnhd/3bp1au+fM2dOjWKXbSmg7uvIkSM1zv3x48fCoEGDBFdXV8HExERwcXERBg4cKJw5c0Zj35t/q+oWAM+Kn5+fLwQHBwsODg6CsbGx4OnpKYwZM0ZITU3VWO4//PCD0LhxY0EqlQoBAQHCrl27NJJ7mdWrVwtmZmbV+t1/XvyUlBRh1KhRgqurqyCVSoVmzZoJS5curdQ2Ic+L/fXXXwuNGjUSjI2NBQ8PD2HmzJlV+vehMp9Njx8/FiZMmCA0bNhQMDc3FwYNGiSkpKRU5VtUbaInSRIRERHRUzgniYiIiEgNFklEREREarBIIiIiIlKDRRIRERGRGiySiIiIiNRgkURERESkBoskIiIiIjVYJBGRQerRowcmTZpUq8959OhRiESicudIEVHdxCKJiOq8mJgYiEQinD59Wu39PXv2xKuvvlrLWRGRvmORRER1XtmhoWvXri133+3bt3HkyBG8/fbbOsiMiPQZiyQiqhP27dsHa2trbN68We39b7/9NrZu3Yr8/HyV6+vXr4eLiwv69OmDjRs3ol27drC0tISzszOGDRuG9PT0Cp9z7ty5CAwMVLm2bNkyeHl5qVz7/vvv0bx5c0ilUvj6+uLbb7+t1mskotrFIomIDN6WLVvw5ptvYvPmzXjrrbfUtnnrrbdQWFiIX3/9VXlNEARs2LABo0aNgkQiQXFxMRYsWID4+Hjs2rULt2/fxqhRo2qU2+bNmzF79mwsXLgQly5dwn//+1/MmjULGzZsqFFcItI+I10nQERUEytWrMCnn36KPXv2oHv37hW2s7W1xaBBg7B27VqMHDkSAHDkyBHcvn0bYWFhAIDRo0cr2/v4+OCbb75B+/bt8ejRIzRo0KBa+c2ZMwdLly5Vznny9vZGQkICVq9ejdDQ0GrFJKLawSKJiAzWr7/+ivT0dPz5559o3779c9uPHj0avXv3xo0bNyCTybB27Vp0794djRs3BlA6wXvu3LmIj4/HgwcPoFAoAABJSUnw8/Orcn55eXm4ceMG3n77bYwZM0Z5vaSkBNbW1lWOR0S1i8NtRGSwWrduDQcHB6xduxaCIDy3fc+ePeHh4YH169cjJycHO3bsUE7YzsvLQ+/evWFlZYXNmzfjr7/+ws6dOwEARUVFauOJxeJyz1tcXKz8/0ePHgEAvvvuO5w7d075deHChQpX2hGR/mBPEhEZLJlMhqVLl6JHjx6QSCRYvnz5M9uLxWKEhYXhhx9+gJubG0xMTPD6668DAC5fvoysrCx8/vnncHd3BwCcPXv2mfEcHByQmpoKQRAgEokAAOfOnVPe7+TkBFdXV9y8ebPCuVJEpL/Yk0REBq1p06Y4cuQItm/fXqnNJcPCwpCcnIwZM2bgzTffhJmZGQDAw8MDJiYmiIiIwM2bN7F7924sWLDgmbF69OiBjIwMLFmyBDdu3MCKFSvw+++/q7SZN28eFi1ahG+++QZXr17F+fPnsW7dOoSHh1f7NRNR7WCRREQGr1mzZjh8+DB++uknfPTRR89s6+HhgaCgIDx48EBloraDgwPWr1+PX375BX5+fvj888/x5ZdfPjNW8+bN8e2332LFihUICAjAmTNn8PHHH6u0eeedd/D9999j3bp1aNmyJbp3747169fD29u7+i+YiGqFSKjMQD4RERFRPcOeJCIiIiI1WCQRERERqcEiiYiIiEgNFklEREREarBIIiIiIlKDRRIRERGRGiySiIiIiNRgkURERESkBoskIiIiIjVYJBERERGpwSKJiIiISA0WSURERERq/D9+qRURxvU4WQAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# **Result**    \n","**After Standardized data:**   \n","Decision Tree:   \n","Mean Squared Error (MSE) = 121.124423828125  \n","R-squared = 0.992414946655254   \n","\n","Random Forest:   \n","Mean Squared Error (MSE) = 55.83290590849609  \n","R-squared = 0.9965036319156484  \n","\n","       \n","**After Standardized data and using cross-validation with 10 folds:**  \n","Decision Tree:    \n","Mean Squared Error (MSE) = 132.35717724609373\n","Mean R-squared = 0.9913241418492408  \n","\n","Random Forest:    \n","Mean Squared Error (MSE) = 59.157863301367186\n","Mean R-squared = 0.9962015180981385\n","\n","**After Standardized data and using KNN regression model:**   \n","Best k value = 6  \n","Best R-squared = 0.9874958212622013  \n","Mean Squared Error (MSE) = 199.67709865993925"],"metadata":{"id":"xlwpBeBJ7Lk8"}},{"cell_type":"markdown","source":["**Interpretation:**   \n","After trying training data with different models, we found that random forest is the best model with highest R-squared with lower mean squared error. When we trained the model using random forest and with different folds, the r-squared values are always slighly higher than using Decision Tree. Also, the mean squared error for random forest in different folds are a lot lower than decision tree. Therefore, we decided to use random forest to run the test dataset."],"metadata":{"id":"6TEoSYfs7INL"}},{"cell_type":"markdown","source":["# **Prediction using Random Forest**"],"metadata":{"id":"DiEWP7HMZ7WI"}},{"cell_type":"code","source":["# Load the test data\n","test_data = pd.read_csv('option_test_nolabel.csv')\n","\n","# Scale the test features using the same scaler\n","X_test_scaled = scaler.transform(test_data[['S', 'K', 'tau', 'r']])\n","\n","# Use the trained model to predict values for the test set\n","test_predictions = random_forest_reg.predict(X_test_scaled)\n","\n","# Add the predictions to the test data\n","test_data['Value'] = test_predictions\n","\n","# Save the predictions to a CSV file\n","test_data[['Value']].to_csv('/content/drive/MyDrive/DSO 530 Project/group_40_prediction.csv', index=False)\n","\n","test_data['Value']"],"metadata":{"id":"h-khK8nA6NmT","executionInfo":{"status":"ok","timestamp":1714674003925,"user_tz":420,"elapsed":937,"user":{"displayName":"Teresa Chen","userId":"17006795700898442372"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"0aeca07e-d7c2-4cbd-aec2-6354fba1a63c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      111.37500\n","1      425.85000\n","2       45.25375\n","3      180.03625\n","4      220.39750\n","         ...    \n","495    327.68125\n","496     18.35000\n","497     40.98375\n","498     79.82625\n","499    228.58125\n","Name: Value, Length: 500, dtype: float64"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Load the predictions from the first file\n","predictions_rf = pd.read_csv('/content/drive/MyDrive/DSO 530 Project/group_40_prediction.csv')\n","\n","# Load the predictions from the second file\n","predictions_bs = pd.read_csv('/content/drive/MyDrive/DSO 530 Project/group_40_prediction_BS.csv')\n","\n","# Merge the two DataFrames on index\n","merged_predictions = pd.concat([predictions_rf, predictions_bs], axis=1)\n","\n","# Save the merged predictions to a new CSV file\n","merged_predictions.to_csv('/content/drive/MyDrive/DSO 530 Project/merged_predictions.csv', index=False)\n","\n","merged_predictions"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"t85EfC26hHaV","executionInfo":{"status":"ok","timestamp":1714674287247,"user_tz":420,"elapsed":6,"user":{"displayName":"Teresa Chen","userId":"17006795700898442372"}},"outputId":"037a9d87-9107-427e-ef61-44f2a7759ab1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         Value  BS\n","0    111.37500   0\n","1    425.85000   0\n","2     45.25375   0\n","3    180.03625   0\n","4    220.39750   0\n","..         ...  ..\n","495  327.68125   0\n","496   18.35000   0\n","497   40.98375   0\n","498   79.82625   0\n","499  228.58125   0\n","\n","[500 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-8f81a71b-fca1-4e76-a34f-148ab1e6099b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Value</th>\n","      <th>BS</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>111.37500</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>425.85000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>45.25375</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>180.03625</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>220.39750</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>495</th>\n","      <td>327.68125</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>496</th>\n","      <td>18.35000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>497</th>\n","      <td>40.98375</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>498</th>\n","      <td>79.82625</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>499</th>\n","      <td>228.58125</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>500 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8f81a71b-fca1-4e76-a34f-148ab1e6099b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8f81a71b-fca1-4e76-a34f-148ab1e6099b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8f81a71b-fca1-4e76-a34f-148ab1e6099b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a850c9d0-ad40-4fc7-b669-f9258f06de42\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a850c9d0-ad40-4fc7-b669-f9258f06de42')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a850c9d0-ad40-4fc7-b669-f9258f06de42 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"merged_predictions","summary":"{\n  \"name\": \"merged_predictions\",\n  \"rows\": 500,\n  \"fields\": [\n    {\n      \"column\": \"Value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 121.82817573097245,\n        \"min\": 0.4975,\n        \"max\": 616.1425,\n        \"num_unique_values\": 491,\n        \"samples\": [\n          17.01125,\n          291.8925,\n          240.135\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["\n","\n","\n","\n"],"metadata":{"id":"Wg24JKY_hIDU"},"execution_count":null,"outputs":[]}]}